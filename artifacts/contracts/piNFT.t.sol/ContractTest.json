{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "log",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "log_address",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "val",
          "type": "uint256[]"
        }
      ],
      "name": "log_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256[]",
          "name": "val",
          "type": "int256[]"
        }
      ],
      "name": "log_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "val",
          "type": "address[]"
        }
      ],
      "name": "log_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "log_bytes",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "log_bytes32",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "name": "log_int",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "val",
          "type": "address"
        }
      ],
      "name": "log_named_address",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "val",
          "type": "uint256[]"
        }
      ],
      "name": "log_named_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "int256[]",
          "name": "val",
          "type": "int256[]"
        }
      ],
      "name": "log_named_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "val",
          "type": "address[]"
        }
      ],
      "name": "log_named_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "val",
          "type": "bytes"
        }
      ],
      "name": "log_named_bytes",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "val",
          "type": "bytes32"
        }
      ],
      "name": "log_named_bytes32",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "val",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decimals",
          "type": "uint256"
        }
      ],
      "name": "log_named_decimal_int",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "val",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decimals",
          "type": "uint256"
        }
      ],
      "name": "log_named_decimal_uint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "val",
          "type": "int256"
        }
      ],
      "name": "log_named_int",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "val",
          "type": "string"
        }
      ],
      "name": "log_named_string",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "val",
          "type": "uint256"
        }
      ],
      "name": "log_named_uint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "log_string",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "log_uint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "logs",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "IS_SCRIPT",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IS_TEST",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "give",
          "type": "uint256"
        }
      ],
      "name": "deal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "give",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "adjust",
          "type": "bool"
        }
      ],
      "name": "deal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "give",
          "type": "uint256"
        }
      ],
      "name": "deal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "what",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "args",
          "type": "bytes"
        }
      ],
      "name": "deployCode",
      "outputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "what",
          "type": "string"
        }
      ],
      "name": "deployCode",
      "outputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "failed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "hoax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "origin",
          "type": "address"
        }
      ],
      "name": "hoax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "origin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "give",
          "type": "uint256"
        }
      ],
      "name": "hoax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "give",
          "type": "uint256"
        }
      ],
      "name": "hoax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "rewind",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "skip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "give",
          "type": "uint256"
        }
      ],
      "name": "startHoax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "origin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "give",
          "type": "uint256"
        }
      ],
      "name": "startHoax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "startHoax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "origin",
          "type": "address"
        }
      ],
      "name": "startHoax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "test_bob_disintegrate_NFT_and_ERC20_tokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "test_fetch_token_uri_and_royalties",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "test_mint_ERC20_tokens_to_validator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "test_mint_an_erc721_token_to_alice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "test_name_and_symbol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "test_transfer_NFT_to_bob",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "test_validator_add_ERC20_tokens_to_alice_NFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "give",
          "type": "uint256"
        }
      ],
      "name": "tip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vm",
      "outputs": [
        {
          "internalType": "contract Vm",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x6080604052600080546201000162ff00ff19909116179055600a80546001600160a01b031990811661abcd17909155600b8054821661abcc179055600c8054821661beef179055600d805490911661abbb17905534801561005f57600080fd5b506177bd80620000706000396000f3fe60806040523480156200001157600080fd5b5060043610620001e95760003560e01c80636f597075116200010d578063c88a5e6d11620000a3578063d82555f1116200007a578063d82555f114620003d1578063e9a79a7b14620003e8578063f8ccbf4714620003ff578063fa7626d4146200041357600080fd5b8063c88a5e6d1462000399578063cd4a7a3c14620003b0578063d06d822914620003ba57600080fd5b80639b1fe7eb11620000e45780639b1fe7eb1462000346578063af9bbe5f1462000350578063b9c071b41462000367578063ba414fa6146200037e57600080fd5b80636f597075146200030157806397754ae914620003185780639a8325a0146200032f57600080fd5b80632aae3c3411620001835780633bf82db1116200015a5780633bf82db114620002bf5780633d6580e114620002d657806369b3ddac14620002e05780636bce989b14620002ea57600080fd5b80632aae3c3414620002875780632d6c17a314620002915780633a76846314620002a857600080fd5b80631db5992011620001c45780631db59920146200021b578063233240ee146200022557806329a9e300146200023c57806329ce9dde146200025357600080fd5b8063050a80fa14620001ee5780630a9254e414620001fa578063108554f21462000204575b600080fd5b620001f862000421565b005b620001f862000656565b620001f86200021536600462003995565b62000729565b620001f862000802565b620001f862000236366004620039c4565b62000b59565b620001f86200024d366004620039eb565b62000c35565b6200026a6200026436600462003b30565b62000ce7565b6040516001600160a01b0390911681526020015b60405180910390f35b620001f862000e17565b620001f8620002a236600462003bb0565b62000fc2565b6200026a600080516020620076b383398151915281565b620001f8620002d036600462003bca565b62001002565b620001f8620010e4565b620001f862001328565b620001f8620002fb36600462003bca565b62001455565b620001f862000312366004620039c4565b62001469565b620001f86200032936600462003c1f565b62001513565b6200026a6200034036600462003c79565b62001754565b620001f862001856565b620001f86200036136600462003bca565b6200198c565b620001f86200037836600462003bb0565b62001a3a565b6200038862001a5b565b60405190151581526020016200027e565b620001f8620003aa36600462003995565b62001b8c565b620001f862001bc2565b620001f8620003cb366004620039eb565b62001f55565b620001f8620003e236600462003bca565b62002007565b620001f8620003f936600462003995565b620020ed565b600054620003889062010000900460ff1681565b600054620003889060ff1681565b6200042b62000e17565b600b5460405163ca669fa760e01b81526001600160a01b039091166004820152600080516020620076b38339815191529063ca669fa790602401600060405180830381600087803b1580156200048057600080fd5b505af115801562000495573d6000803e3d6000fd5b5050600854600d5460095460405163830ef41b60e01b8152600060048201526001600160a01b03928316602482015290821660448201526101f460648201529116925063830ef41b9150608401600060405180830381600087803b158015620004fd57600080fd5b505af115801562000512573d6000803e3d6000fd5b505060085460095460405163d51f299d60e01b8152600060048201526001600160a01b039182166024820152620005b794509116915063d51f299d90604401602060405180830381865afa1580156200056f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000595919062003cba565b6000604051806060016040528060268152602001620076d36026913962002193565b600954600d546040516370a0823160e01b81526001600160a01b039182166004820152620006549291909116906370a0823190602401602060405180830381865afa1580156200060b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000631919062003cba565b6103e86040518060600160405280602c815260200162007719602c913962002193565b565b60405162000664906200392e565b60408082526007908201526641636f6e6f6d7960c81b60608201526080602082018190526003908201526241434f60e81b60a082015260c001604051809103906000f080158015620006ba573d6000803e3d6000fd5b50600880546001600160a01b0319166001600160a01b0392909216919091179055604051620006e9906200393c565b604051809103906000f08015801562000706573d6000803e3d6000fd5b50600980546001600160a01b0319166001600160a01b0392909216919091179055565b60405163c88a5e6d60e01b8152600080516020620076b38339815191529063c88a5e6d906200075f908590859060040162003cd4565b600060405180830381600087803b1580156200077a57600080fd5b505af11580156200078f573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b0385166004820152600080516020620076b383398151915292506306447d5691506024015b600060405180830381600087803b158015620007e557600080fd5b505af1158015620007fa573d6000803e3d6000fd5b505050505050565b6200080c620010e4565b6200081662001328565b600d5460405163ca669fa760e01b81526001600160a01b039091166004820152600080516020620076b38339815191529063ca669fa790602401600060405180830381600087803b1580156200086b57600080fd5b505af115801562000880573d6000803e3d6000fd5b505060095460085460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b39350620008bf92909116906103e89060040162003cd4565b6020604051808303816000875af1158015620008df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000905919062003ced565b50600d5460405163ca669fa760e01b81526001600160a01b039091166004820152600080516020620076b38339815191529063ca669fa790602401600060405180830381600087803b1580156200095b57600080fd5b505af115801562000970573d6000803e3d6000fd5b5050600854600d54600954604051632b32c03b60e01b81526001600160a01b0392831660048201526000602482015290821660448201526101f4606482015291169250632b32c03b9150608401600060405180830381600087803b158015620009d857600080fd5b505af1158015620009ed573d6000803e3d6000fd5b505060085460095460405163d51f299d60e01b81526000600482018190526001600160a01b03928316602483015294509116915063d51f299d90604401602060405180830381865afa15801562000a48573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a6e919062003cba565b600954600d546040516370a0823160e01b81526001600160a01b0391821660048201529293506000929116906370a0823190602401602060405180830381865afa15801562000ac1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ae7919062003cba565b905062000b11826101f4604051806060016040528060238152602001620077656023913962002193565b62000b55816101f46040518060400160405280601e81526020017f56616c696461746f72732062616c616e6365206e6f742072656475636564000081525062002193565b5050565b60405163c88a5e6d60e01b8152600080516020620076b38339815191529063c88a5e6d9062000b93908490600160801b9060040162003cd4565b600060405180830381600087803b15801562000bae57600080fd5b505af115801562000bc3573d6000803e3d6000fd5b505060405163ca669fa760e01b81526001600160a01b0384166004820152600080516020620076b3833981519152925063ca669fa791506024015b600060405180830381600087803b15801562000c1957600080fd5b505af115801562000c2e573d6000803e3d6000fd5b5050505050565b60405163c88a5e6d60e01b8152600080516020620076b38339815191529063c88a5e6d9062000c6f908590600160801b9060040162003cd4565b600060405180830381600087803b15801562000c8a57600080fd5b505af115801562000c9f573d6000803e3d6000fd5b50506040516323f2866760e11b81526001600160a01b03808616600483015284166024820152600080516020620076b383398151915292506347e50cce9150604401620007ca565b604051638d1cc92560e01b81526000908190600080516020620076b383398151915290638d1cc9259062000d2090879060040162003d6a565b6000604051808303816000875af115801562000d40573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000d6a919081019062003db5565b8360405160200162000d7e92919062003e03565b60405160208183030381529060405290508051602082016000f091506001600160a01b03821662000e105760405162461bcd60e51b815260206004820152603160248201527f54657374206465706c6f79436f646528737472696e672c6279746573293a204460448201527032b83637bcb6b2b73a103330b4b632b21760791b60648201526084015b60405180910390fd5b5092915050565b62000e2162000802565b600a5460405163ca669fa760e01b81526001600160a01b039091166004820152600080516020620076b38339815191529063ca669fa790602401600060405180830381600087803b15801562000e7657600080fd5b505af115801562000e8b573d6000803e3d6000fd5b5050600854600a54600b54604051632142170760e11b81526001600160a01b039283166004820152908216602482015260006044820152911692506342842e0e9150606401600060405180830381600087803b15801562000eeb57600080fd5b505af115801562000f00573d6000803e3d6000fd5b50506008546040516331a9108f60e11b8152600060048201526200065493506001600160a01b039091169150636352211e90602401602060405180830381865afa15801562000f53573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f79919062003e36565b600b5460408051808201909152601a81527f4e6f74207472616e73666572726564204e465420746f20426f6200000000000060208201526001600160a01b0390911690620021cf565b600080516020620076b383398151915263e5d6bf0262000fe3834262003e6c565b6040518263ffffffff1660e01b815260040162000bfe91815260200190565b60405163c88a5e6d60e01b8152600080516020620076b38339815191529063c88a5e6d9062001038908690859060040162003cd4565b600060405180830381600087803b1580156200105357600080fd5b505af115801562001068573d6000803e3d6000fd5b50506040516308b6ac0f60e31b81526001600160a01b03808716600483015285166024820152600080516020620076b383398151915292506345b5607891506044015b600060405180830381600087803b158015620010c657600080fd5b505af1158015620010db573d6000803e3d6000fd5b50505050505050565b606062001101604080518082019091526000808252602082015290565b50604080518082018252600c546001600160a01b03168152600a6020820152815160018082528184019093529091816020015b604080518082019091526000808252602082015281526020019060019003908162001134579050509150808260008151811062001175576200117562003e86565b602090810291909101810191909152604080518082018252600a808252697777772e736b2e636f6d60b01b938201939093526008549254915163ee53b6a960e01b815290926000926001600160a01b039182169263ee53b6a992620011e39216908690899060040162003e9c565b6020604051808303816000875af115801562001203573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001229919062003cba565b905062001236816200221d565b620012798160006040518060400160405280601881526020017f4661696c6564206d696e74696e67205269676874204e4654000000000000000081525062002193565b600854600a546040516370a0823160e01b81526001600160a01b039182166004820152620013229291909116906370a0823190602401602060405180830381865afa158015620012cd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620012f3919062003cba565b60016040518060400160405280600e81526020016d11985a5b1959081d1bc81b5a5b9d60921b81525062002193565b50505050565b600954600d546040516340c10f1960e01b81526001600160a01b03928316926340c10f199262001362929116906103e89060040162003cd4565b600060405180830381600087803b1580156200137d57600080fd5b505af115801562001392573d6000803e3d6000fd5b5050600954600d546040516370a0823160e01b81526001600160a01b03918216600482015260009450911691506370a0823190602401602060405180830381865afa158015620013e6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200140c919062003cba565b905062001452816103e86040518060400160405280601b81526020017f4661696c656420746f206d696e7420455243323020746f6b656e73000000000081525062002193565b50565b62001464838383600062001513565b505050565b60405163c88a5e6d60e01b8152600080516020620076b38339815191529063c88a5e6d90620014a3908490600160801b9060040162003cd4565b600060405180830381600087803b158015620014be57600080fd5b505af1158015620014d3573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b0384166004820152600080516020620076b383398151915292506306447d56915060240162000bfe565b604080516001600160a01b0385811660248084019190915283518084039091018152604490920183526020820180516001600160e01b03166370a0823160e01b1790529151600092871691620015699162003f1e565b6000604051808303816000865af19150503d8060008114620015a8576040519150601f19603f3d011682016040523d82523d6000602084013e620015ad565b606091505b50915050600081806020019051810190620015c9919062003cba565b90506200163b8462001634876200160b6370a0823160e01b620015ee60018d62002265565b9060038201805463ffffffff191660e09290921c91909117905590565b90600282018054600181018255600091825260209091206001600160a01b039290921691015590565b906200228a565b8215620007fa5760408051600481526024810182526020810180516001600160e01b03166318160ddd60e01b17905290516000916001600160a01b0389169162001686919062003f1e565b6000604051808303816000865af19150503d8060008114620016c5576040519150601f19603f3d011682016040523d82523d6000602084013e620016ca565b606091505b50915050600081806020019051810190620016e6919062003cba565b9050828610156200171157620016fd868462003e6c565b62001709908262003e6c565b90506200172c565b6200171d838762003e6c565b62001729908262003f3c565b90505b6200174a81620016346318160ddd60e01b620015ee60018d62002265565b5050505050505050565b604051638d1cc92560e01b81526000908190600080516020620076b383398151915290638d1cc925906200178d90869060040162003d6a565b6000604051808303816000875af1158015620017ad573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620017d7919081019062003db5565b90508051602082016000f091506001600160a01b038216620018505760405162461bcd60e51b815260206004820152602b60248201527f54657374206465706c6f79436f646528737472696e67293a204465706c6f796d60448201526a32b73a103330b4b632b21760a91b606482015260840162000e07565b50919050565b600854604080516306fdde0360e01b81529051620018f3926001600160a01b0316916306fdde039160048083019260009291908290030181865afa158015620018a3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620018cd919081019062003db5565b6040518060400160405280600781526020016641636f6e6f6d7960c81b81525062002296565b600854604080516395d89b4160e01b8152905162000654926001600160a01b0316916395d89b419160048083019260009291908290030181865afa15801562001940573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200196a919081019062003db5565b6040518060400160405280600381526020016241434f60e81b81525062002296565b60405163c88a5e6d60e01b8152600080516020620076b38339815191529063c88a5e6d90620019c2908690859060040162003cd4565b600060405180830381600087803b158015620019dd57600080fd5b505af1158015620019f2573d6000803e3d6000fd5b50506040516323f2866760e11b81526001600160a01b03808716600483015285166024820152600080516020620076b383398151915292506347e50cce9150604401620010ab565b600080516020620076b383398151915263e5d6bf0262000fe3834262003f3c565b60008054610100900460ff161562001a7c5750600054610100900460ff1690565b6000600080516020620076b38339815191523b1562001b8757604051600090600080516020620076b3833981519152907f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc49062001ae99083906519985a5b195960d21b9060200162003cd4565b60408051601f198184030181529082905262001b09929160200162003f57565b60408051601f198184030181529082905262001b259162003f1e565b6000604051808303816000865af19150503d806000811462001b64576040519150601f19603f3d011682016040523d82523d6000602084013e62001b69565b606091505b509150508080602001905181019062001b83919062003ced565b9150505b919050565b60405163c88a5e6d60e01b8152600080516020620076b38339815191529063c88a5e6d90620007ca908590859060040162003cd4565b606062001bdf604080518082019091526000808252602082015290565b50604080518082018252600c546001600160a01b03168152600a6020820152815160018082528184019093529091816020015b604080518082019091526000808252602082015281526020019060019003908162001c12579050509150808260008151811062001c535762001c5362003e86565b602090810291909101810191909152604080518082018252600a808252697777772e736b2e636f6d60b01b938201939093526008549254915163ee53b6a960e01b815290926000926001600160a01b039182169263ee53b6a99262001cc19216908690899060040162003e9c565b6020604051808303816000875af115801562001ce1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001d07919062003cba565b60085460405163c87b56dd60e01b8152600481018390529192506000916001600160a01b039091169063c87b56dd90602401600060405180830381865afa15801562001d57573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001d81919081019062003db5565b905062001de7816040518060400160405280600a8152602001697777772e736b2e636f6d60b01b8152506040518060400160405280601981526020017f496e76616c69642055524920666f722074686520746f6b656e00000000000000815250620023bd565b600854604051635d9dd7eb60e11b8152600481018490526000916001600160a01b03169063bb3bafd690602401600060405180830381865afa15801562001e32573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001e5c919081019062003fb1565b905062001e8a8160008151811062001e785762001e7862003e86565b60200260200101516000015162002449565b62001ef58160008151811062001ea45762001ea462003e86565b602002602001015160000151600c60009054906101000a90046001600160a01b03166040518060400160405280601081526020016f57726f6e6720526f79616c697469657360801b815250620021cf565b620007fa8160008151811062001f0f5762001f0f62003e86565b6020026020010151602001516001600160601b0316600a6040518060400160405280601081526020016f57726f6e6720526f79616c697469657360801b81525062002193565b60405163c88a5e6d60e01b8152600080516020620076b38339815191529063c88a5e6d9062001f8f908590600160801b9060040162003cd4565b600060405180830381600087803b15801562001faa57600080fd5b505af115801562001fbf573d6000803e3d6000fd5b50506040516308b6ac0f60e31b81526001600160a01b03808616600483015284166024820152600080516020620076b383398151915292506345b560789150604401620007ca565b600080516020620076f9833981519152604051620020c2906040808252600790820152665741524e494e4760c81b6060820152608060208201819052605e908201527f546573742074697028616464726573732c616464726573732c75696e7432353660a08201527f293a2054686520607469706020737464636865617420686173206265656e206460c08201527f6570726563617465642e2055736520606465616c6020696e73746561642e000060e08201526101000190565b60405180910390a1620014648162001634846200160b6370a0823160e01b620015ee60018a62002265565b60405163c88a5e6d60e01b8152600080516020620076b38339815191529063c88a5e6d9062002123908590859060040162003cd4565b600060405180830381600087803b1580156200213e57600080fd5b505af115801562002153573d6000803e3d6000fd5b505060405163ca669fa760e01b81526001600160a01b0385166004820152600080516020620076b3833981519152925063ca669fa79150602401620007ca565b8183146200146457600080516020620076f983398151915281604051620021bb919062004096565b60405180910390a162001464838362002493565b816001600160a01b0316836001600160a01b0316146200146457600080516020620076f98339815191528160405162002209919062004096565b60405180910390a162001464838362002578565b62001452816040516024016200223591815260200190565b60408051601f198184030181529190526020810180516001600160e01b031663f5b1bba960e01b17905262002672565b6005820180546001600160a01b0319166001600160a01b039290921691909117905590565b62000b55828262002693565b80604051602001620022a9919062003f1e565b6040516020818303038152906040528051906020012082604051602001620022d2919062003f1e565b604051602081830303815290604052805190602001201462000b55577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516200235b9060208082526024908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b737472604082015263696e675d60e01b606082015260800190565b60405180910390a1600080516020620076f983398151915281604051620023839190620040c7565b60405180910390a1600080516020620076f983398151915282604051620023ab919062004106565b60405180910390a162000b55620029fc565b81604051602001620023d0919062003f1e565b6040516020818303038152906040528051906020012083604051602001620023f9919062003f1e565b60405160208183030381529060405280519060200120146200146457600080516020620076f98339815191528160405162002435919062004096565b60405180910390a162001464838362002296565b6040516001600160a01b0382166024820152620014529060440160408051601f198184030181529190526020810180516001600160e01b031663161765e160e11b17905262002672565b80821462000b55577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051620025069060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8816040516200253f919062004131565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a882604051620023ab91906200416a565b806001600160a01b0316826001600160a01b03161462000b55577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051620026009060208082526025908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b616464604082015264726573735d60d81b606082015260800190565b60405180910390a17f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f8160405162002639919062004195565b60405180910390a17f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f82604051620023ab9190620041da565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b600582015460038301546004840154600285018054604080516020808402820181019092528281526001600160a01b039096169560e09590951b94600093909290918301828280156200270657602002820191906000526020600020905b815481526020019060010190808311620026f1575b505050505090506000836200271b8362002b00565b6040516020016200272e92919062003f57565b60408051601f198184030181528282526001600160a01b038816600090815260018b0160209081528382206001600160e01b03198a1683528152928120919450909290916200278291869188910162004205565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff16620027bd57620027bb8762002bad565b505b6001600160a01b0385166000908152602088815260408083206001600160e01b0319881684528252808320905190918391620027fe91879189910162004205565b6040516020818303038152906040528051906020012081526020019081526020016000205460001b9050600080876001600160a01b03168460405162002845919062003f1e565b600060405180830381855afa9150503d806000811462002882576040519150601f19603f3d011682016040523d82523d6000602084013e62002887565b606091505b509150620028a49050816200289e88602062004241565b620038a4565b604051630667f9d760e41b815290925060009150600080516020620076b38339815191529063667f9d7090620028e1908b90879060040162003cd4565b6020604051808303816000875af115801562002901573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002927919062003cba565b90508082146200294b5760405162461bcd60e51b815260040162000e079062004263565b6040516370ca10bb60e01b8152600080516020620076b3833981519152906370ca10bb9062002983908b9087908e90600401620042fe565b600060405180830381600087803b1580156200299e57600080fd5b505af1158015620029b3573d6000803e3d6000fd5b50505060058b0180546001600160a01b03191690555060038a01805463ffffffff19169055620029e860028b0160006200394a565b896004016000905550505050505050505050565b600080516020620076b38339815191523b1562002aef57604051600090600080516020620076b3833981519152907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49062002a6a9083906519985a5b195960d21b90600190602001620042fe565b60408051601f198184030181529082905262002a8a929160200162003f57565b60408051601f198184030181529082905262002aa69162003f1e565b6000604051808303816000865af19150503d806000811462002ae5576040519150601f19603f3d011682016040523d82523d6000602084013e62002aea565b606091505b505050505b6000805461ff001916610100179055565b606060008251602062002b14919062004241565b67ffffffffffffffff81111562002b2f5762002b2f62003a29565b6040519080825280601f01601f19166020018201604052801562002b5a576020820181803683370190505b50905060005b835181101562000e1057600084828151811062002b815762002b8162003e86565b60200260200101519050808260200260200184015250808062002ba4906200431f565b91505062002b60565b600581015460038201546004830154600284018054604080516020808402820181019092528281526000966001600160a01b03169560e01b94938793919290919083018282801562002c1f57602002820191906000526020600020905b81548152602001906001019080831162002c0a575b5050506001600160a01b038716600090815260018a01602090815260408083206001600160e01b03198a168452825280832090519596509491935062002c6b9250859187910162004205565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff161562002d0a576001600160a01b0384166000908152602087815260408083206001600160e01b0319871684528252808320905190929162002cda91859187910162004205565b60405160208183030381529060405280519060200120815260200190815260200160002054945050505050919050565b60008362002d188362002b00565b60405160200162002d2b92919062003f57565b60405160208183030381529060405290506000805160206200774583398151915260001c6001600160a01b031663266cf1096040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562002d8a57600080fd5b505af115801562002d9f573d6000803e3d6000fd5b50505050600080866001600160a01b03168360405162002dc0919062003f1e565b600060405180830381855afa9150503d806000811462002dfd576040519150601f19603f3d011682016040523d82523d6000602084013e62002e02565b606091505b50915062002e199050816200289e87602062004241565b6040516365bc948160e01b81526001600160a01b038916600482015290925060009150600080516020620076b3833981519152906365bc9481906024016000604051808303816000875af115801562002e76573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262002ea09190810190620043a8565b5090508051600103620031695760006000805160206200774583398151915260001c6001600160a01b031663667f9d70898460008151811062002ee75762002ee762003e86565b60200260200101516040518363ffffffff1660e01b815260040162002f0e92919062003cd4565b6020604051808303816000875af115801562002f2e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002f54919062003cba565b90508062002fb8577f080fc4a96620c4462e705b23f346413fe3796bb63c6f8d8591baec0e231577a5888360008151811062002f945762002f9462003e86565b602002602001015160001c60405162002faf92919062003cd4565b60405180910390a15b80831462002fda5760405162461bcd60e51b815260040162000e079062004263565b7f9c9555b1e3102e3cf48f427d79cb678f5d9bd1ed0ad574389461e255f95170ed888887896040516020016200301292919062004205565b60405160208183030381529060405280519060200120856000815181106200303e576200303e62003e86565b602002602001015160001c6040516200305b949392919062004409565b60405180910390a18160008151811062003079576200307962003e86565b6020908102919091018101516001600160a01b038a1660009081528c835260408082206001600160e01b03198c1683528452808220905192939092620030c4918a918c910162004205565b60408051601f1981840301815291815281516020928301208352828201939093529082016000908120939093556001600160a01b038b16835260018d810182528284206001600160e01b03198c168552825282842092519093916200312e918a918c910162004205565b60408051808303601f19018152918152815160209283012083529082019290925201600020805460ff19169115159190911790555062003727565b600181511115620036b65760005b8151811015620036af5760006000805160206200774583398151915260001c6001600160a01b031663667f9d708a858581518110620031ba57620031ba62003e86565b60200260200101516040518363ffffffff1660e01b8152600401620031e192919062003cd4565b6020604051808303816000875af115801562003201573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003227919062003cba565b9050806200328a577f080fc4a96620c4462e705b23f346413fe3796bb63c6f8d8591baec0e231577a58984848151811062003266576200326662003e86565b602002602001015160001c6040516200328192919062003cd4565b60405180910390a15b6000805160206200774583398151915260001c6001600160a01b03166370ca10bb8a858581518110620032c157620032c162003e86565b602002602001015161133760f01b6040518463ffffffff1660e01b8152600401620032ef93929190620042fe565b600060405180830381600087803b1580156200330a57600080fd5b505af11580156200331f573d6000803e3d6000fd5b50505050600060608a6001600160a01b03168760405162003341919062003f1e565b600060405180830381855afa9150503d80600081146200337e576040519150601f19603f3d011682016040523d82523d6000602084013e62003383565b606091505b5090925090506200339b816200289e8b602062004241565b9550818015620033af575061133760f01b86145b1562003602577f9c9555b1e3102e3cf48f427d79cb678f5d9bd1ed0ad574389461e255f95170ed8b8b8a8c604051602001620033ed92919062004205565b6040516020818303038152906040528051906020012088888151811062003418576200341862003e86565b602002602001015160001c60405162003435949392919062004409565b60405180910390a184848151811062003452576200345262003e86565b6020908102919091018101516001600160a01b038d1660009081528f835260408082206001600160e01b03198f16835284528082209051929390926200349d918d918f910162004205565b6040516020818303038152906040528051906020012081526020019081526020016000208190555060018d60010160008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008c6001600160e01b0319166001600160e01b031916815260200190815260200160002060008a8c6040516020016200352a92919062004205565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548160ff0219169083151502179055506000805160206200774583398151915260001c6001600160a01b03166370ca10bb8c8787815181106200359c576200359c62003e86565b6020026020010151866040518463ffffffff1660e01b8152600401620035c593929190620042fe565b600060405180830381600087803b158015620035e057600080fd5b505af1158015620035f5573d6000803e3d6000fd5b50505050505050620036af565b6000805160206200774583398151915260001c6001600160a01b03166370ca10bb8c87878151811062003639576200363962003e86565b6020026020010151866040518463ffffffff1660e01b81526004016200366293929190620042fe565b600060405180830381600087803b1580156200367d57600080fd5b505af115801562003692573d6000803e3d6000fd5b505050505050508080620036a6906200431f565b91505062003177565b5062003727565b6040805162461bcd60e51b81526020600482015260248101919091527f73746453746f726167652066696e642853746453746f72616765293a204e6f2060448201527f73746f726167652075736520646574656374656420666f72207461726765742e606482015260840162000e07565b6001600160a01b038716600090815260018a01602090815260408083206001600160e01b03198a168452825280832090519092916200376b9188918a910162004205565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff16620037fa5760405162461bcd60e51b815260206004820152602f60248201527f73746453746f726167652066696e642853746453746f72616765293a20536c6f60448201526e3a143994903737ba103337bab7321760891b606482015260840162000e07565b6005890180546001600160a01b031916905560038901805463ffffffff191690556200382b60028a0160006200394a565b600060048a018190556001600160a01b038816815260208a815260408083206001600160e01b03198a16845282528083209051909291620038719188918a910162004205565b60405160208183030381529060405280519060200120815260200190815260200160002054975050505050505050919050565b60008060006020855111620038bb578451620038be565b60205b905060005b818110156200392457620038d981600862004241565b86620038e6838862003f3c565b81518110620038f957620038f962003e86565b01602001516001600160f81b031916901c9290921791806200391b816200431f565b915050620038c3565b5090949350505050565b61274f806200443a83390190565b610b2a8062006b8983390190565b50805460008255906000526020600020908101906200145291905b808211156200397b576000815560010162003965565b5090565b6001600160a01b03811681146200145257600080fd5b60008060408385031215620039a957600080fd5b8235620039b6816200397f565b946020939093013593505050565b600060208284031215620039d757600080fd5b8135620039e4816200397f565b9392505050565b60008060408385031215620039ff57600080fd5b823562003a0c816200397f565b9150602083013562003a1e816200397f565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171562003a655762003a6562003a29565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171562003a975762003a9762003a29565b604052919050565b600067ffffffffffffffff82111562003abc5762003abc62003a29565b50601f01601f191660200190565b600062003ae162003adb8462003a9f565b62003a6b565b905082815283838301111562003af657600080fd5b828260208301376000602084830101529392505050565b600082601f83011262003b1f57600080fd5b620039e48383356020850162003aca565b6000806040838503121562003b4457600080fd5b823567ffffffffffffffff8082111562003b5d57600080fd5b62003b6b8683870162003b0d565b9350602085013591508082111562003b8257600080fd5b508301601f8101851362003b9557600080fd5b62003ba68582356020840162003aca565b9150509250929050565b60006020828403121562003bc357600080fd5b5035919050565b60008060006060848603121562003be057600080fd5b833562003bed816200397f565b9250602084013562003bff816200397f565b929592945050506040919091013590565b80151581146200145257600080fd5b6000806000806080858703121562003c3657600080fd5b843562003c43816200397f565b9350602085013562003c55816200397f565b925060408501359150606085013562003c6e8162003c10565b939692955090935050565b60006020828403121562003c8c57600080fd5b813567ffffffffffffffff81111562003ca457600080fd5b62003cb28482850162003b0d565b949350505050565b60006020828403121562003ccd57600080fd5b5051919050565b6001600160a01b03929092168252602082015260400190565b60006020828403121562003d0057600080fd5b8151620039e48162003c10565b60005b8381101562003d2a57818101518382015260200162003d10565b83811115620013225750506000910152565b6000815180845262003d5681602086016020860162003d0d565b601f01601f19169290920160200192915050565b602081526000620039e4602083018462003d3c565b600062003d9062003adb8462003a9f565b905082815283838301111562003da557600080fd5b620039e483602083018462003d0d565b60006020828403121562003dc857600080fd5b815167ffffffffffffffff81111562003de057600080fd5b8201601f8101841362003df257600080fd5b62003cb28482516020840162003d7f565b6000835162003e1781846020880162003d0d565b83519083019062003e2d81836020880162003d0d565b01949350505050565b60006020828403121562003e4957600080fd5b8151620039e4816200397f565b634e487b7160e01b600052601160045260246000fd5b60008282101562003e815762003e8162003e56565b500390565b634e487b7160e01b600052603260045260246000fd5b600060018060a01b038086168352602060608185015262003ec1606085018762003d3c565b84810360408681019190915286518083528388019284019060005b8181101562003f0e5784518051881684528601516001600160601b031686840152938501939183019160010162003edc565b50909a9950505050505050505050565b6000825162003f3281846020870162003d0d565b9190910192915050565b6000821982111562003f525762003f5262003e56565b500190565b6001600160e01b031983168152815160009062003f7c81600485016020870162003d0d565b919091016004019392505050565b600067ffffffffffffffff82111562003fa75762003fa762003a29565b5060051b60200190565b6000602080838503121562003fc557600080fd5b825167ffffffffffffffff81111562003fdd57600080fd5b8301601f8101851362003fef57600080fd5b80516200400062003adb8262003f8a565b81815260069190911b820183019083810190878311156200402057600080fd5b928401925b828410156200408b5760408489031215620040405760008081fd5b6200404a62003a3f565b845162004057816200397f565b8152848601516001600160601b0381168114620040745760008081fd5b818701528252604093909301929084019062004025565b979650505050505050565b60408152600560408201526422b93937b960d91b6060820152608060208201526000620039e4608083018462003d3c565b604081526000620040f260408301600a8152690808115e1c1958dd195960b21b602082015260400190565b828103602084015262003cb2818562003d3c565b604081526000620040f260408301600a815269080808081058dd1d585b60b21b602082015260400190565b6040815260006200415c60408301600a8152690808115e1c1958dd195960b21b602082015260400190565b905082602083015292915050565b6040815260006200415c60408301600a815269080808081058dd1d585b60b21b602082015260400190565b604081526000620041c060408301600a8152690808115e1c1958dd195960b21b602082015260400190565b6001600160a01b0393909316602092909201919091525090565b604081526000620041c060408301600a815269080808081058dd1d585b60b21b602082015260400190565b825160009082906020808701845b83811015620042315781518552938201939082019060010162004213565b5050948252509092019392505050565b60008160001904831182151516156200425e576200425e62003e56565b500290565b6020808252606f908201527f73746453746f726167652066696e642853746453746f72616765293a2050616360408201527f6b656420736c6f742e205468697320776f756c642063617573652064616e676560608201527f726f7573206f76657277726974696e6720616e642063757272656e746c79206960808201526e39b713ba1039bab83837b93a32b21760891b60a082015260c00190565b6001600160a01b039390931683526020830191909152604082015260600190565b60006001820162004334576200433462003e56565b5060010190565b600082601f8301126200434d57600080fd5b815160206200436062003adb8362003f8a565b82815260059290921b840181019181810190868411156200438057600080fd5b8286015b848110156200439d578051835291830191830162004384565b509695505050505050565b60008060408385031215620043bc57600080fd5b825167ffffffffffffffff80821115620043d557600080fd5b620043e3868387016200433b565b93506020850151915080821115620043fa57600080fd5b5062003ba6858286016200433b565b6001600160a01b039490941684526001600160e01b0319929092166020840152604083015260608201526080019056fe60806040523480156200001157600080fd5b506040516200274f3803806200274f83398101604081905262000034916200012b565b8181600062000044838262000224565b50600162000053828262000224565b5050505050620002f0565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200008657600080fd5b81516001600160401b0380821115620000a357620000a36200005e565b604051601f8301601f19908116603f01168101908282118183101715620000ce57620000ce6200005e565b81604052838152602092508683858801011115620000eb57600080fd5b600091505b838210156200010f5785820183015181830184015290820190620000f0565b83821115620001215760008385830101525b9695505050505050565b600080604083850312156200013f57600080fd5b82516001600160401b03808211156200015757600080fd5b620001658683870162000074565b935060208501519150808211156200017c57600080fd5b506200018b8582860162000074565b9150509250929050565b600181811c90821680620001aa57607f821691505b602082108103620001cb57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200021f57600081815260208120601f850160051c81016020861015620001fa5750805b601f850160051c820191505b818110156200021b5782815560010162000206565b5050505b505050565b81516001600160401b038111156200024057620002406200005e565b620002588162000251845462000195565b84620001d1565b602080601f831160018114620002905760008415620002775750858301515b600019600386901b1c1916600185901b1785556200021b565b600085815260208120601f198616915b82811015620002c157888601518255948401946001909101908401620002a0565b5085821015620002e05787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61244f80620003006000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c8063830ef41b116100ad578063c87b56dd11610071578063c87b56dd14610271578063d51f299d14610284578063e985e9c5146102ba578063ee53b6a9146102f6578063fb2ef4a31461030957600080fd5b8063830ef41b1461021057806395d89b4114610223578063a22cb4651461022b578063b88d4fde1461023e578063bb3bafd61461025157600080fd5b806323b872dd116100f457806323b872dd146101a35780632b32c03b146101b657806342842e0e146101c95780636352211e146101dc57806370a08231146101ef57600080fd5b806301ffc9a71461012657806306fdde031461014e578063081812fc14610163578063095ea7b31461018e575b600080fd5b610139610134366004611b14565b610343565b60405190151581526020015b60405180910390f35b610156610395565b6040516101459190611b89565b610176610171366004611b9c565b610427565b6040516001600160a01b039091168152602001610145565b6101a161019c366004611bca565b61044e565b005b6101a16101b1366004611bf6565b610568565b6101a16101c4366004611c37565b610599565b6101a16101d7366004611bf6565b6106c1565b6101766101ea366004611b9c565b6106dc565b6102026101fd366004611c7f565b61073c565b604051908152602001610145565b6101a161021e366004611c9c565b6107c2565b610156610995565b6101a1610239366004611ce2565b6109a4565b6101a161024c366004611de3565b6109b3565b61026461025f366004611b9c565b6109e5565b6040516101459190611e63565b61015661027f366004611b9c565b610a74565b610202610292366004611ec4565b60009182526008602090815260408084206001600160a01b0393909316845291905290205490565b6101396102c8366004611ee9565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b610202610304366004611f17565b610b84565b61031c61031736600461204e565b610bbe565b604080516001600160a01b0390931683526001600160601b03909116602083015201610145565b60006001600160e01b031982166380ac58cd60e01b148061037457506001600160e01b03198216635b5e139f60e01b145b8061038f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546103a490612070565b80601f01602080910402602001604051908101604052809291908181526020018280546103d090612070565b801561041d5780601f106103f25761010080835404028352916020019161041d565b820191906000526020600020905b81548152906001019060200180831161040057829003601f168201915b5050505050905090565b600061043282610c07565b506000908152600460205260409020546001600160a01b031690565b6000610459826106dc565b9050806001600160a01b0316836001600160a01b0316036104cb5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806104e757506104e781336102c8565b6105595760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060648201526084016104c2565b6105638383610c69565b505050565b6105723382610cd7565b61058e5760405162461bcd60e51b81526004016104c2906120aa565b610563838383610d55565b6001600160a01b03841633146105f15760405162461bcd60e51b815260206004820152601860248201527f6e6f7420616c6c6f77656420746f20616464204552433230000000000000000060448201526064016104c2565b6105fd84848484610f00565b6040516323b872dd60e01b81526001600160a01b038581166004830152306024830152604482018390528316906323b872dd906064016020604051808303816000875af1158015610652573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067691906120f8565b6106bb5760405162461bcd60e51b815260206004820152601660248201527522a9219918103a3930b739b332b9103330b4b632b21760511b60448201526064016104c2565b50505050565b610563838383604051806020016040528060008152506109b3565b6000818152600260205260408120546001600160a01b03168061038f5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016104c2565b60006001600160a01b0382166107a65760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016104c2565b506001600160a01b031660009081526003602052604090205490565b6001600160a01b0383166108185760405162461bcd60e51b815260206004820152601b60248201527f63616e6e6f742073656e6420746f207a65726f2061646472657373000000000060448201526064016104c2565b6000610823856106dc565b90506001600160a01b038116331461087d5760405162461bcd60e51b815260206004820152601760248201527f6f6e6c79206f776e65722063616e207472616e7366657200000000000000000060448201526064016104c2565b610888858484611061565b60405163a9059cbb60e01b81526001600160a01b0385811660048301526024820184905284169063a9059cbb906044016020604051808303816000875af11580156108d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fb91906120f8565b6109405760405162461bcd60e51b815260206004820152601660248201527522a9219918103a3930b739b332b9103330b4b632b21760511b60448201526064016104c2565b826001600160a01b0316846001600160a01b0316867fa8352277873fc0d2b233b8127433da351a4164fa701ed6ff79655694222932c48560405161098691815260200190565b60405180910390a45050505050565b6060600180546103a490612070565b6109af338383611279565b5050565b6109bd3383610cd7565b6109d95760405162461bcd60e51b81526004016104c2906120aa565b6106bb84848484611347565b6060600a6000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015610a6957600084815260209081902060408051808201909152908401546001600160a01b0381168252600160a01b90046001600160601b031681830152825260019092019101610a1a565b505050509050919050565b6060610a7f82610c07565b60008281526006602052604081208054610a9890612070565b80601f0160208091040260200160405190810160405280929190818152602001828054610ac490612070565b8015610b115780601f10610ae657610100808354040283529160200191610b11565b820191906000526020600020905b815481529060010190602001808311610af457829003601f168201915b505050505090506000610b2f60408051602081019091526000815290565b90508051600003610b41575092915050565b815115610b73578082604051602001610b5b929190612115565b60405160208183030381529060405292505050919050565b610b7c8461137a565b949350505050565b600080610b9060075490565b9050610b9c81846113ee565b610ba685826116a8565b610bb081856116c2565b610b7c600780546001019055565b600a6020528160005260406000208181548110610bda57600080fd5b6000918252602090912001546001600160a01b0381169250600160a01b90046001600160601b0316905082565b6000818152600260205260409020546001600160a01b0316610c665760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016104c2565b50565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610c9e826106dc565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610ce3836106dc565b9050806001600160a01b0316846001600160a01b03161480610d2a57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80610b7c5750836001600160a01b0316610d4384610427565b6001600160a01b031614949350505050565b826001600160a01b0316610d68826106dc565b6001600160a01b031614610dcc5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016104c2565b6001600160a01b038216610e2e5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016104c2565b600081815260046020908152604080832080546001600160a01b03191690556001600160a01b038616835260039091528120805460019290610e7190849061215a565b90915550506001600160a01b0382166000908152600360205260408120805460019290610e9f908490612171565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000610f0b846106dc565b6001600160a01b031603610f615760405162461bcd60e51b815260206004820152601860248201527f5f746f6b656e496420646f6573206e6f742065786973742e000000000000000060448201526064016104c2565b80156106bb5760008381526008602090815260408083206001600160a01b038616845290915281205490819003610fe25760008481526009602081815260408084208054600b84528286206001600160a01b038a16808852908552928620819055938352600184018155845292200180546001600160a01b03191690911790555b60008481526008602090815260408083206001600160a01b038716845290915281208054849290611014908490612171565b92505081905550826001600160a01b031684866001600160a01b03167f684ce28ace37552c6bfb98b7cceda8ed55327078eafb5dfb31218e08563827638560405161098691815260200190565b8060000361106e57505050565b60008381526008602090815260408083206001600160a01b0386168452909152902054818110156110f15760405162461bcd60e51b815260206004820152602760248201527f4e6f7420656e6f75676820746f6b656e20617661696c61626c6520746f20747260448201526630b739b332b91760c91b60648201526084016104c2565b60006110fd838361215a565b60008681526008602090815260408083206001600160a01b03891684529091528120829055909150819003611272576000858152600960205260408120546111479060019061215a565b6000878152600960205260408120805492935090918390811061116c5761116c612189565b6000918252602090912001546001600160a01b0390811691508616811461120f576000878152600b602090815260408083206001600160a01b038a1684528252808320548a845260099092529091208054839190839081106111d0576111d0612189565b600091825260208083209190910180546001600160a01b0319166001600160a01b039485161790558a8252600b81526040808320938616835292905220555b6000878152600b602090815260408083206001600160a01b038a16845282528083208390558983526009909152902080548061124d5761124d61219f565b600082815260209020810160001990810180546001600160a01b031916905501905550505b5050505050565b816001600160a01b0316836001600160a01b0316036112da5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016104c2565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611352848484610d55565b61135e84848484611755565b6106bb5760405162461bcd60e51b81526004016104c2906121b5565b606061138582610c07565b600061139c60408051602081019091526000815290565b905060008151116113bc57604051806020016040528060008152506113e7565b806113c684611856565b6040516020016113d7929190612115565b6040516020818303038152906040525b9392505050565b600a815111156114405760405162461bcd60e51b815260206004820181905260248201527f41746d6f737420313020726f79616c746965732063616e20626520616464656460448201526064016104c2565b6000828152600a6020526040812061145791611acc565b6000805b82518110156116115760006001600160a01b031683828151811061148157611481612189565b6020026020010151600001516001600160a01b0316036114ef5760405162461bcd60e51b815260206004820152602360248201527f526f79616c747920726563697069656e742073686f756c642062652070726573604482015262195b9d60ea1b60648201526084016104c2565b82818151811061150157611501612189565b6020026020010151602001516001600160601b03166000036115655760405162461bcd60e51b815260206004820152601b60248201527f526f79616c74792076616c75652073686f756c64206265203e2030000000000060448201526064016104c2565b6000848152600a60205260409020835184908390811061158757611587612189565b6020908102919091018101518254600181018455600093845292829020815191909201516001600160601b0316600160a01b026001600160a01b039091161791015582518390829081106115dd576115dd612189565b6020026020010151602001516001600160601b0316826115fd9190612171565b91508061160981612207565b91505061145b565b5061271081106116635760405162461bcd60e51b815260206004820152601760248201527f53756d206f6620526f79616c74696573203e203130302500000000000000000060448201526064016104c2565b816040516116719190612220565b6040519081900381209084907fe23425cf56a81561c420f592eb54f21107c562f26c8c78c4a20d26920d244e6690600090a3505050565b6109af828260405180602001604052806000815250611957565b6000828152600260205260409020546001600160a01b031661173d5760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b60648201526084016104c2565b600082815260066020526040902061056382826122c1565b60006001600160a01b0384163b1561184b57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611799903390899088908890600401612381565b6020604051808303816000875af19250505080156117d4575060408051601f3d908101601f191682019092526117d1918101906123be565b60015b611831573d808015611802576040519150601f19603f3d011682016040523d82523d6000602084013e611807565b606091505b5080516000036118295760405162461bcd60e51b81526004016104c2906121b5565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610b7c565b506001949350505050565b60608160000361187d5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156118a7578061189181612207565b91506118a09050600a836123f1565b9150611881565b60008167ffffffffffffffff8111156118c2576118c2611d1b565b6040519080825280601f01601f1916602001820160405280156118ec576020820181803683370190505b5090505b8415610b7c5761190160018361215a565b915061190e600a86612405565b611919906030612171565b60f81b81838151811061192e5761192e612189565b60200101906001600160f81b031916908160001a905350611950600a866123f1565b94506118f0565b611961838361198a565b61196e6000848484611755565b6105635760405162461bcd60e51b81526004016104c2906121b5565b6001600160a01b0382166119e05760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016104c2565b6000818152600260205260409020546001600160a01b031615611a455760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104c2565b6001600160a01b0382166000908152600360205260408120805460019290611a6e908490612171565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b5080546000825590600052602060002090810190610c6691905b80821115611afa5760008155600101611ae6565b5090565b6001600160e01b031981168114610c6657600080fd5b600060208284031215611b2657600080fd5b81356113e781611afe565b60005b83811015611b4c578181015183820152602001611b34565b838111156106bb5750506000910152565b60008151808452611b75816020860160208601611b31565b601f01601f19169290920160200192915050565b6020815260006113e76020830184611b5d565b600060208284031215611bae57600080fd5b5035919050565b6001600160a01b0381168114610c6657600080fd5b60008060408385031215611bdd57600080fd5b8235611be881611bb5565b946020939093013593505050565b600080600060608486031215611c0b57600080fd5b8335611c1681611bb5565b92506020840135611c2681611bb5565b929592945050506040919091013590565b60008060008060808587031215611c4d57600080fd5b8435611c5881611bb5565b9350602085013592506040850135611c6f81611bb5565b9396929550929360600135925050565b600060208284031215611c9157600080fd5b81356113e781611bb5565b60008060008060808587031215611cb257600080fd5b843593506020850135611cc481611bb5565b92506040850135611c6f81611bb5565b8015158114610c6657600080fd5b60008060408385031215611cf557600080fd5b8235611d0081611bb5565b91506020830135611d1081611cd4565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715611d5457611d54611d1b565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611d8357611d83611d1b565b604052919050565b600067ffffffffffffffff831115611da557611da5611d1b565b611db8601f8401601f1916602001611d5a565b9050828152838383011115611dcc57600080fd5b828260208301376000602084830101529392505050565b60008060008060808587031215611df957600080fd5b8435611e0481611bb5565b93506020850135611e1481611bb5565b925060408501359150606085013567ffffffffffffffff811115611e3757600080fd5b8501601f81018713611e4857600080fd5b611e5787823560208401611d8b565b91505092959194509250565b602080825282518282018190526000919060409081850190868401855b82811015611eb757815180516001600160a01b031685528601516001600160601b0316868501529284019290850190600101611e80565b5091979650505050505050565b60008060408385031215611ed757600080fd5b823591506020830135611d1081611bb5565b60008060408385031215611efc57600080fd5b8235611f0781611bb5565b91506020830135611d1081611bb5565b600080600060608486031215611f2c57600080fd5b8335611f3781611bb5565b925060208481013567ffffffffffffffff80821115611f5557600080fd5b818701915087601f830112611f6957600080fd5b611f77888335858501611d8b565b9450604091508187013581811115611f8e57600080fd5b8701601f81018913611f9f57600080fd5b803582811115611fb157611fb1611d1b565b611fbf858260051b01611d5a565b818152858101935060069190911b82018501908a821115611fdf57600080fd5b918501915b8183101561203e5784838c031215611ffc5760008081fd5b612004611d31565b833561200f81611bb5565b8152838701356001600160601b038116811461202b5760008081fd5b8188015284529285019291840191611fe4565b8096505050505050509250925092565b6000806040838503121561206157600080fd5b50508035926020909101359150565b600181811c9082168061208457607f821691505b6020821081036120a457634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b60006020828403121561210a57600080fd5b81516113e781611cd4565b60008351612127818460208801611b31565b83519083019061213b818360208801611b31565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b60008282101561216c5761216c612144565b500390565b6000821982111561218457612184612144565b500190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60006001820161221957612219612144565b5060010190565b815160009082906020808601845b8381101561226757815180516001600160a01b031686528301516001600160601b0316838601526040909401939082019060010161222e565b50929695505050505050565b601f82111561056357600081815260208120601f850160051c8101602086101561229a5750805b601f850160051c820191505b818110156122b9578281556001016122a6565b505050505050565b815167ffffffffffffffff8111156122db576122db611d1b565b6122ef816122e98454612070565b84612273565b602080601f831160018114612324576000841561230c5750858301515b600019600386901b1c1916600185901b1785556122b9565b600085815260208120601f198616915b8281101561235357888601518255948401946001909101908401612334565b50858210156123715787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906123b490830184611b5d565b9695505050505050565b6000602082840312156123d057600080fd5b81516113e781611afe565b634e487b7160e01b600052601260045260246000fd5b600082612400576124006123db565b500490565b600082612414576124146123db565b50069056fea264697066735822122018615737a54784d3ab34fc6fc40d38b8bed441e18652d7a538fe2fcc8b131bd964736f6c634300080f0033608060405234801561001057600080fd5b506040518060400160405280600b81526020016a053616d706c6545524332360ac1b81525060405180604001604052806002815260200161151560f21b815250816003908161005f9190610113565b50600461006c8282610113565b5050506101d2565b634e487b7160e01b600052604160045260246000fd5b600181811c9082168061009e57607f821691505b6020821081036100be57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561010e57600081815260208120601f850160051c810160208610156100eb5750805b601f850160051c820191505b8181101561010a578281556001016100f7565b5050505b505050565b81516001600160401b0381111561012c5761012c610074565b6101408161013a845461008a565b846100c4565b602080601f831160018114610175576000841561015d5750858301515b600019600386901b1c1916600185901b17855561010a565b600085815260208120601f198616915b828110156101a457888601518255948401946001909101908401610185565b50858210156101c25787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610949806101e16000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806340c10f191161007157806340c10f191461014157806370a082311461015657806395d89b411461017f578063a457c2d714610187578063a9059cbb1461019a578063dd62ed3e146101ad57600080fd5b806306fdde03146100b9578063095ea7b3146100d757806318160ddd146100fa57806323b872dd1461010c578063313ce5671461011f578063395093511461012e575b600080fd5b6100c16101c0565b6040516100ce9190610787565b60405180910390f35b6100ea6100e53660046107f8565b610252565b60405190151581526020016100ce565b6002545b6040519081526020016100ce565b6100ea61011a366004610822565b61026a565b604051601281526020016100ce565b6100ea61013c3660046107f8565b61028e565b61015461014f3660046107f8565b6102b0565b005b6100fe61016436600461085e565b6001600160a01b031660009081526020819052604090205490565b6100c16102be565b6100ea6101953660046107f8565b6102cd565b6100ea6101a83660046107f8565b61034d565b6100fe6101bb366004610880565b61035b565b6060600380546101cf906108b3565b80601f01602080910402602001604051908101604052809291908181526020018280546101fb906108b3565b80156102485780601f1061021d57610100808354040283529160200191610248565b820191906000526020600020905b81548152906001019060200180831161022b57829003601f168201915b5050505050905090565b600033610260818585610386565b5060019392505050565b6000336102788582856104aa565b610283858585610524565b506001949350505050565b6000336102608185856102a1838361035b565b6102ab91906108ed565b610386565b6102ba82826106c8565b5050565b6060600480546101cf906108b3565b600033816102db828661035b565b9050838110156103405760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102838286868403610386565b600033610260818585610524565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166103e85760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610337565b6001600160a01b0382166104495760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610337565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006104b6848461035b565b9050600019811461051e57818110156105115760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610337565b61051e8484848403610386565b50505050565b6001600160a01b0383166105885760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610337565b6001600160a01b0382166105ea5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610337565b6001600160a01b038316600090815260208190526040902054818110156106625760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610337565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a361051e565b6001600160a01b03821661071e5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610337565b806002600082825461073091906108ed565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b600060208083528351808285015260005b818110156107b457858101830151858201604001528201610798565b818111156107c6576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b03811681146107f357600080fd5b919050565b6000806040838503121561080b57600080fd5b610814836107dc565b946020939093013593505050565b60008060006060848603121561083757600080fd5b610840846107dc565b925061084e602085016107dc565b9150604084013590509250925092565b60006020828403121561087057600080fd5b610879826107dc565b9392505050565b6000806040838503121561089357600080fd5b61089c836107dc565b91506108aa602084016107dc565b90509250929050565b600181811c908216806108c757607f821691505b6020821081036108e757634e487b7160e01b600052602260045260246000fd5b50919050565b6000821982111561090e57634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220baf2e5e7476317212738364aedae4aff02c22456621dafa3221397fd207b32e064736f6c634300080f00330000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12d4661696c656420746f2072656d6f766520455243323020746f6b656e732066726f6d204e4654280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf35834661696c656420746f207472616e7366657220455243323020746f6b656e7320746f2076616c696461746f72885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d4661696c656420746f2061646420455243323020746f6b656e7320696e746f204e4654a2646970667358221220523464a250c52c1e38c46444045a0f08b113b031d5e7ec30eb380e227b82228964736f6c634300080f0033",
    "sourceMap": "240:3908:3:-:0;;;1572:26:4;;;171:28:5;-1:-1:-1;;171:28:5;;;;;;337:48:3;;;-1:-1:-1;;;;;;337:48:3;;;377:6;337:48;;;;391:46;;;;;429:6;391:46;;;443:58;;;;;493:6;443:58;;;507:52;;;;;;551:6;507:52;;;240:3908;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "",
    "sourceMap": "240:3908:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3602:542;;;:::i;:::-;;566:135;;;:::i;2070:116:6:-;;;;;;:::i;:::-;;:::i;2677:649:3:-;;;:::i;1417:96:6:-;;;;;;:::i;:::-;;:::i;1631:120::-;;;;;;:::i;:::-;;:::i;5142:455::-;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;3391:32:24;;;3373:51;;3361:2;3346:18;5142:455:6;;;;;;;;3332:264:3;;;:::i;1269:85:6:-;;;;;;:::i;:::-;;:::i;322:38:5:-;;-1:-1:-1;;;;;;;;;;;322:38:5;;2441:140:6;;;;;;:::i;:::-;;:::i;1088:574:3:-;;;:::i;2448:223::-;;;:::i;3370:107:6:-;;;;;;:::i;:::-;;:::i;1958:106::-;;;;;;:::i;:::-;;:::i;3483:915::-;;;;;;:::i;:::-;;:::i;5603:406::-;;;;;;:::i;:::-;;:::i;709:373:3:-;;;:::i;1757:130:6:-;;;;;;:::i;:::-;;:::i;1180:83::-;;;;;;:::i;:::-;;:::i;1819:584:4:-;;;:::i;:::-;;;5512:14:24;;5505:22;5487:41;;5475:2;5460:18;1819:584:4;5347:187:24;3165:81:6;;;;;;:::i;:::-;;:::i;1668:774:3:-;;;:::i;2305:130:6:-;;;;;;:::i;:::-;;:::i;2733:341::-;;;;;;:::i;:::-;;:::i;1519:106::-;;;;;;:::i;:::-;;:::i;171:28:5:-;;;;;;;;;;;;1572:26:4;;;;;;;;;3602:542:3;3672:26;:24;:26::i;:::-;3717:3;;3708:13;;-1:-1:-1;;;3708:13:3;;-1:-1:-1;;;;;3717:3:3;;;3708:13;;;3373:51:24;-1:-1:-1;;;;;;;;;;;251:64:5;3708:8:3;;3346:18:24;;3708:13:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3731:13:3;;3762:9;;3781:13;;3731:70;;-1:-1:-1;;;3731:70:3;;:13;:70;;;6012:25:24;-1:-1:-1;;;;;3762:9:3;;;6091:18:24;;;6084:43;3781:13:3;;;6143:18:24;;;6136:43;3797:3:3;6195:18:24;;;6188:34;3731:13:3;;;-1:-1:-1;3731:27:3;;-1:-1:-1;5984:19:24;;3731:70:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3839:13:3;;3876;;3839:52;;-1:-1:-1;;;3839:52:3;;:13;:52;;;6415:25:24;-1:-1:-1;;;;;3876:13:3;;;6456:18:24;;;6449:60;3812:170:3;;-1:-1:-1;3839:13:3;;;-1:-1:-1;3839:25:3;;6388:18:24;;3839:52:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3909:1;3812:170;;;;;;;;;;;;;;;;;:8;:170::i;:::-;4015:13;;4039:9;;4015:34;;-1:-1:-1;;;4015:34:3;;-1:-1:-1;;;;;4039:9:3;;;4015:34;;;3373:51:24;3993:144:3;;4015:13;;;;;:23;;3346:18:24;;4015:34:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4063:4;3993:144;;;;;;;;;;;;;;;;;:8;:144::i;:::-;3602:542::o;566:135::-;616:27;;;;;:::i;:::-;7012:2:24;6994:21;;;7051:1;7031:18;;;7024:29;-1:-1:-1;;;7084:2:24;7069:18;;7062:37;7137:3;7130:4;7115:20;;7108:33;;;7178:1;7157:19;;;7150:30;-1:-1:-1;;;7211:3:24;7196:19;;7189:34;7255:3;7240:19;616:27:3;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;600:13:3;:43;;-1:-1:-1;;;;;;600:43:3;-1:-1:-1;;;;;600:43:3;;;;;;;;;;669:17;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;653:13:3;:33;;-1:-1:-1;;;;;;653:33:3;-1:-1:-1;;;;;653:33:3;;;;;;;;;;566:135::o;2070:116:6:-;2133:18;;-1:-1:-1;;;2133:18:6;;-1:-1:-1;;;;;;;;;;;251:64:5;2133:7:6;;:18;;2141:3;;2146:4;;2133:18;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2161:18:6;;-1:-1:-1;;;2161:18:6;;-1:-1:-1;;;;;3391:32:24;;2161:18:6;;;3373:51:24;-1:-1:-1;;;;;;;;;;;251:64:5;-1:-1:-1;2161:13:6;;-1:-1:-1;3346:18:24;;2161::6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2070:116;;:::o;2677:649:3:-;2749:36;:34;:36::i;:::-;2795:37;:35;:37::i;:::-;2852:9;;2843:19;;-1:-1:-1;;;2843:19:3;;-1:-1:-1;;;;;2852:9:3;;;2843:19;;;3373:51:24;-1:-1:-1;;;;;;;;;;;251:64:5;2843:8:3;;3346:18:24;;2843:19:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2872:13:3;;2902;;2872:51;;-1:-1:-1;;;2872:51:3;;-1:-1:-1;;;;;2872:13:3;;;;-1:-1:-1;2872:21:3;;-1:-1:-1;2872:51:3;;2902:13;;;;2918:4;;2872:51;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;2942:9:3;;2933:19;;-1:-1:-1;;;2933:19:3;;-1:-1:-1;;;;;2942:9:3;;;2933:19;;;3373:51:24;-1:-1:-1;;;;;;;;;;;251:64:5;2933:8:3;;3346:18:24;;2933:19:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2962:13:3;;2985:9;;3007:13;;2962:65;;-1:-1:-1;;;2962:65:3;;-1:-1:-1;;;;;2985:9:3;;;2962:65;;;8384:34:24;2962:13:3;8434:18:24;;;8427:34;3007:13:3;;;8477:18:24;;;8470:43;3023:3:3;8529:18:24;;;8522:34;2962:13:3;;;-1:-1:-1;2962:22:3;;-1:-1:-1;8318:19:24;;2962:65:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3057:13:3;;3094;;3057:52;;-1:-1:-1;;;3057:52:3;;3037:16;3057:52;;;6415:25:24;;;-1:-1:-1;;;;;3094:13:3;;;6456:18:24;;;6449:60;3037:16:3;-1:-1:-1;3057:13:3;;;-1:-1:-1;3057:25:3;;6388:18:24;;3057:52:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3142:13;;3166:9;;3142:34;;-1:-1:-1;;;3142:34:3;;-1:-1:-1;;;;;3166:9:3;;;3142:34;;;3373:51:24;3037:72:3;;-1:-1:-1;3119:20:3;;3142:13;;;:23;;3346:18:24;;3142:34:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3119:57;;3186:62;3195:8;3205:3;3186:62;;;;;;;;;;;;;;;;;:8;:62::i;:::-;3258:61;3267:12;3281:3;3258:61;;;;;;;;;;;;;;;;;:8;:61::i;:::-;2739:587;;2677:649::o;1417:96:6:-;1461:22;;-1:-1:-1;;;1461:22:6;;-1:-1:-1;;;;;;;;;;;251:64:5;1461:7:6;;:22;;1469:3;;-1:-1:-1;;;1474:8:6;1461:22;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1493:13:6;;-1:-1:-1;;;1493:13:6;;-1:-1:-1;;;;;3391:32:24;;1493:13:6;;;3373:51:24;-1:-1:-1;;;;;;;;;;;251:64:5;-1:-1:-1;1493:8:6;;-1:-1:-1;3346:18:24;;1493:13:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1417:96;:::o;1631:120::-;1691:22;;-1:-1:-1;;;1691:22:6;;-1:-1:-1;;;;;;;;;;;251:64:5;1691:7:6;;:22;;1699:3;;-1:-1:-1;;;1704:8:6;1691:22;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1723:21:6;;-1:-1:-1;;;1723:21:6;;-1:-1:-1;;;;;9122:15:24;;;1723:21:6;;;9104:34:24;9174:15;;9154:18;;;9147:43;-1:-1:-1;;;;;;;;;;;251:64:5;-1:-1:-1;1723:8:6;;-1:-1:-1;9039:18:24;;1723:21:6;8892:304:24;5142:455:6;5302:16;;-1:-1:-1;;;5302:16:6;;5233:12;;;;-1:-1:-1;;;;;;;;;;;251:64:5;5302:10:6;;:16;;5313:4;;5302:16;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5302:16:6;;;;;;;;;;;;:::i;:::-;5320:4;5285:40;;;;;;;;;:::i;:::-;;;;;;;;;;;;;5261:64;;5446:8;5440:15;5433:4;5423:8;5419:19;5416:1;5409:47;5401:55;-1:-1:-1;;;;;;5497:18:6;;5476:114;;;;-1:-1:-1;;;5476:114:6;;11400:2:24;5476:114:6;;;11382:21:24;11439:2;11419:18;;;11412:30;11478:34;11458:18;;;11451:62;-1:-1:-1;;;11529:18:24;;;11522:47;11586:19;;5476:114:6;;;;;;;;;5251:346;5142:455;;;;:::o;3332:264:3:-;3384:46;:44;:46::i;:::-;3449:5;;3440:15;;-1:-1:-1;;;3440:15:3;;-1:-1:-1;;;;;3449:5:3;;;3440:15;;;3373:51:24;-1:-1:-1;;;;;;;;;;;251:64:5;3440:8:3;;3346:18:24;;3440:15:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3465:13:3;;3496:5;;3503:3;;3465:45;;-1:-1:-1;;;3465:45:3;;-1:-1:-1;;;;;3496:5:3;;;3465:45;;;11880:34:24;3503:3:3;;;11930:18:24;;;11923:43;3465:13:3;11982:18:24;;;11975:34;3465:13:3;;;-1:-1:-1;3465:30:3;;-1:-1:-1;11815:18:24;;3465:45:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3529:13:3;;:24;;-1:-1:-1;;;3529:24:3;;:13;:24;;;12174:25:24;3520:69:3;;-1:-1:-1;;;;;;3529:13:3;;;;-1:-1:-1;3529:21:3;;12147:18:24;;3529:24:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3555:3;;3520:69;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3555:3:3;;;;3520:8;:69::i;1269:85:6:-;-1:-1:-1;;;;;;;;;;;1316:7:6;1324:22;1342:4;1324:15;:22;:::i;:::-;1316:31;;;;;;;;;;;;;12174:25:24;;12162:2;12147:18;;12020:185;2441:140:6;2520:18;;-1:-1:-1;;;2520:18:6;;-1:-1:-1;;;;;;;;;;;251:64:5;2520:7:6;;:18;;2528:3;;2533:4;;2520:18;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2548:26:6;;-1:-1:-1;;;2548:26:6;;-1:-1:-1;;;;;9122:15:24;;;2548:26:6;;;9104:34:24;9174:15;;9154:18;;;9147:43;-1:-1:-1;;;;;;;;;;;251:64:5;-1:-1:-1;2548:13:6;;-1:-1:-1;9039:18:24;;2548:26:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2441:140;;;:::o;1088:574:3:-;1156:32;1199:29;-1:-1:-1;;;;;;;;;;;;;;;;;;;1199:29:3;-1:-1:-1;1248:43:3;;;;;;;;1263:15;;-1:-1:-1;;;;;1263:15:3;1248:43;;1287:2;1248:43;;;;1320:23;;1263:15;1320:23;;;;;;;;;1248:43;;1320:23;;;;-1:-1:-1;;;;;;;;;;;;;;;;;1320:23:3;;;;;;;;;;;;;;;1310:33;;1367:7;1353:8;1362:1;1353:11;;;;;;;;:::i;:::-;;;;;;;;;;;:21;;;;1384:32;;;;;;;;;;;;-1:-1:-1;;;1384:32:3;;;;;;;1454:13;;1476:5;;1454:43;;-1:-1:-1;;;1454:43:3;;1384:32;;:17;;-1:-1:-1;;;;;1454:13:3;;;;:21;;:43;;1476:5;;1384:32;;1488:8;;1454:43;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1436:61;;1507:20;1519:7;1507:11;:20::i;:::-;1537:47;1546:7;1555:1;1537:47;;;;;;;;;;;;;;;;;:8;:47::i;:::-;1603:13;;1627:5;;1603:30;;-1:-1:-1;;;1603:30:3;;-1:-1:-1;;;;;1627:5:3;;;1603:30;;;3373:51:24;1594:61:3;;1603:13;;;;;:23;;3346:18:24;;1603:30:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1635:1;1594:61;;;;;;;;;;;;;-1:-1:-1;;;1594:61:3;;;:8;:61::i;:::-;1140:522;;;;1088:574::o;2448:223::-;2511:13;;2530:9;;2511:35;;-1:-1:-1;;;2511:35:3;;-1:-1:-1;;;;;2511:13:3;;;;:18;;:35;;2530:9;;;2541:4;;2511:35;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2570:13:3;;2594:9;;2570:34;;-1:-1:-1;;;2570:34:3;;-1:-1:-1;;;;;2594:9:3;;;2570:34;;;3373:51:24;2556:11:3;;-1:-1:-1;2570:13:3;;;-1:-1:-1;2570:23:3;;3346:18:24;;2570:34:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2556:48;;2614:50;2623:3;2628:4;2614:50;;;;;;;;;;;;;;;;;:8;:50::i;:::-;2501:170;2448:223::o;3370:107:6:-;3442:28;3447:5;3454:2;3458:4;3464:5;3442:4;:28::i;:::-;3370:107;;;:::o;1958:106::-;2007:22;;-1:-1:-1;;;2007:22:6;;-1:-1:-1;;;;;;;;;;;251:64:5;2007:7:6;;:22;;2015:3;;-1:-1:-1;;;2020:8:6;2007:22;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2039:18:6;;-1:-1:-1;;;2039:18:6;;-1:-1:-1;;;;;3391:32:24;;2039:18:6;;;3373:51:24;-1:-1:-1;;;;;;;;;;;251:64:5;-1:-1:-1;2039:13:6;;-1:-1:-1;3346:18:24;;2039::6;3227:203:24;3483:915:6;3637:38;;;-1:-1:-1;;;;;3391:32:24;;;3637:38:6;;;;3373:51:24;;;;3637:38:6;;;;;;;;;;3346:18:24;;;;3637:38:6;;;;;;;-1:-1:-1;;;;;3637:38:6;-1:-1:-1;;;3637:38:6;;;3626:50;;3602:20;;3626:10;;;:50;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3599:77;;;3686:15;3715:7;3704:30;;;;;;;;;;;;:::i;:::-;3686:48;-1:-1:-1;3771:123:6;3889:4;3771:90;3858:2;3771:64;-1:-1:-1;;;3771:35:6;:8;3800:5;3771:28;:35::i;:::-;:52;19603:9;;;:16;;-1:-1:-1;;19603:16:6;;;;;;;;;;;;:9;19504:143;3771:64;:86;19919:10;;;:47;;;;;;;-1:-1:-1;19919:47:6;;;;;;;-1:-1:-1;;;;;19943:21:6;;;;19919:47;;;:10;19815:179;3771:90;:117;;:123::i;:::-;3939:6;3936:456;;;4001:34;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4001:34:6;-1:-1:-1;;;4001:34:6;;;3990:46;;3963:23;;-1:-1:-1;;;;;3990:10:6;;;:46;;4001:34;3990:46;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3960:76;;;4050:14;4078:10;4067:33;;;;;;;;;;;;:::i;:::-;4050:50;;4124:7;4117:4;:14;4114:143;;;4162:14;4172:4;4162:7;:14;:::i;:::-;4151:26;;;;:::i;:::-;;;4114:143;;;4227:14;4234:7;4227:4;:14;:::i;:::-;4216:26;;;;:::i;:::-;;;4114:143;4270:111;4374:6;4270:72;-1:-1:-1;;;4270:39:6;:8;4303:5;4270:32;:39::i;:111::-;3946:446;;3558:840;;3483:915;;;;:::o;5603:406::-;5727:16;;-1:-1:-1;;;5727:16:6;;5675:12;;;;-1:-1:-1;;;;;;;;;;;251:64:5;5727:10:6;;:16;;5738:4;;5727:16;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5727:16:6;;;;;;;;;;;;:::i;:::-;5703:40;;5864:8;5858:15;5851:4;5841:8;5837:19;5834:1;5827:47;5819:55;-1:-1:-1;;;;;;5915:18:6;;5894:108;;;;-1:-1:-1;;;5894:108:6;;15040:2:24;5894:108:6;;;15022:21:24;15079:2;15059:18;;;15052:30;15118:34;15098:18;;;15091:62;-1:-1:-1;;;15169:18:24;;;15162:41;15220:19;;5894:108:6;14838:407:24;5894:108:6;5693:316;5603:406;;;:::o;709:373:3:-;864:13;;:20;;;-1:-1:-1;;;864:20:3;;;;855:41;;-1:-1:-1;;;;;864:13:3;;:18;;:20;;;;;:13;;:20;;;;;;;:13;:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;864:20:3;;;;;;;;;;;;:::i;:::-;855:41;;;;;;;;;;;;;-1:-1:-1;;;855:41:3;;;:8;:41::i;:::-;915:13;;:22;;;-1:-1:-1;;;915:22:3;;;;906:39;;-1:-1:-1;;;;;915:13:3;;:20;;:22;;;;;:13;;:22;;;;;;;:13;:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;915:22:3;;;;;;;;;;;;:::i;:::-;906:39;;;;;;;;;;;;;-1:-1:-1;;;906:39:3;;;:8;:39::i;1757:130:6:-;1831:18;;-1:-1:-1;;;1831:18:6;;-1:-1:-1;;;;;;;;;;;251:64:5;1831:7:6;;:18;;1839:3;;1844:4;;1831:18;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1859:21:6;;-1:-1:-1;;;1859:21:6;;-1:-1:-1;;;;;9122:15:24;;;1859:21:6;;;9104:34:24;9174:15;;9154:18;;;9147:43;-1:-1:-1;;;;;;;;;;;251:64:5;-1:-1:-1;1859:8:6;;-1:-1:-1;9039:18:24;;1859:21:6;8892:304:24;1180:83:6;-1:-1:-1;;;;;;;;;;;1225:7:6;1233:22;1251:4;1233:15;:22;:::i;1819:584:4:-;1853:4;1873:7;;;;;;;1869:528;;;-1:-1:-1;1903:7:4;;;;;;;;1819:584::o;1869:528::-;1941:17;-1:-1:-1;;;;;;;;;;;2978:55:4;3059:16;1980:374;;2196:43;;2023:20;;-1:-1:-1;;;;;;;;;;;1671:64:4;2135:34;;2196:43;;1671:64;;-1:-1:-1;;;2221:17:4;2196:43;;;:::i;:::-;;;;-1:-1:-1;;2196:43:4;;;;;;;;;;2086:175;;;2196:43;2086:175;;:::i;:::-;;;;-1:-1:-1;;2086:175:4;;;;;;;;;;2047:232;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2020:259;;;2323:7;2312:27;;;;;;;;;;;;:::i;:::-;2297:42;;2002:352;1980:374;2374:12;1819:584;-1:-1:-1;1819:584:4:o;3165:81:6:-;3222:17;;-1:-1:-1;;;3222:17:6;;-1:-1:-1;;;;;;;;;;;251:64:5;3222:7:6;;:17;;3230:2;;3234:4;;3222:17;;;:::i;1668:774:3:-;1731:32;1774:29;-1:-1:-1;;;;;;;;;;;;;;;;;;;1774:29:3;-1:-1:-1;1823:43:3;;;;;;;;1838:15;;-1:-1:-1;;;;;1838:15:3;1823:43;;1862:2;1823:43;;;;1895:23;;1838:15;1895:23;;;;;;;;;1823:43;;1895:23;;;;-1:-1:-1;;;;;;;;;;;;;;;;;1895:23:3;;;;;;;;;;;;;;;1885:33;;1942:7;1928:8;1937:1;1928:11;;;;;;;;:::i;:::-;;;;;;;;;;;:21;;;;1959:32;;;;;;;;;;;;-1:-1:-1;;;1959:32:3;;;;;;;2019:13;;2041:5;;2019:43;;-1:-1:-1;;;2019:43:3;;1959:32;;:17;;-1:-1:-1;;;;;2019:13:3;;;;:21;;:43;;2041:5;;1959:32;;2053:8;;2019:43;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2093:13;;:31;;-1:-1:-1;;;2093:31:3;;;;;12174:25:24;;;2001:61:3;;-1:-1:-1;2072:18:3;;-1:-1:-1;;;;;2093:13:3;;;;:22;;12147:18:24;;2093:31:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2093:31:3;;;;;;;;;;;;:::i;:::-;2072:52;;2134:57;2143:4;2134:57;;;;;;;;;;;;;-1:-1:-1;;;2134:57:3;;;;;;;;;;;;;;;;;;;;:8;:57::i;:::-;2233:13;;:35;;-1:-1:-1;;;2233:35:3;;;;;12174:25:24;;;2202:28:3;;-1:-1:-1;;;;;2233:13:3;;:26;;12147:18:24;;2233:35:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2233:35:3;;;;;;;;;;;;:::i;:::-;2202:66;;2278:28;2290:4;2295:1;2290:7;;;;;;;;:::i;:::-;;;;;;;:15;;;2278:11;:28::i;:::-;2316:62;2325:4;2330:1;2325:7;;;;;;;;:::i;:::-;;;;;;;:15;;;2342;;;;;;;;;-1:-1:-1;;;;;2342:15:3;2316:62;;;;;;;;;;;;;-1:-1:-1;;;2316:62:3;;;:8;:62::i;:::-;2388:47;2397:4;2402:1;2397:7;;;;;;;;:::i;:::-;;;;;;;:13;;;-1:-1:-1;;;;;2388:47:3;2412:2;2388:47;;;;;;;;;;;;;-1:-1:-1;;;2388:47:3;;;:8;:47::i;2305:130:6:-;2370:22;;-1:-1:-1;;;2370:22:6;;-1:-1:-1;;;;;;;;;;;251:64:5;2370:7:6;;:22;;2378:3;;-1:-1:-1;;;2383:8:6;2370:22;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2402:26:6;;-1:-1:-1;;;2402:26:6;;-1:-1:-1;;;;;9122:15:24;;;2402:26:6;;;9104:34:24;9174:15;;9154:18;;;9147:43;-1:-1:-1;;;;;;;;;;;251:64:5;-1:-1:-1;2402:13:6;;-1:-1:-1;9039:18:24;;2402:26:6;8892:304:24;2733:341:6;-1:-1:-1;;;;;;;;;;;2809:125:6;;;;18327:2:24;18309:21;;;18366:1;18346:18;;;18339:29;-1:-1:-1;;;18399:2:24;18384:18;;18377:37;18452:3;18445:4;18430:20;;18423:33;;;18493:2;18472:19;;;18465:31;18533:34;18527:3;18512:19;;18505:63;18605:34;18599:3;18584:19;;18577:63;18677:32;18671:3;18656:19;;18649:61;18742:3;18727:19;;18024:728;2809:125:6;;;;;;;;2944:123;3062:4;2944:90;3031:2;2944:64;-1:-1:-1;;;2944:35:6;:8;2973:5;2944:28;:35::i;1519:106::-;1577:18;;-1:-1:-1;;;1577:18:6;;-1:-1:-1;;;;;;;;;;;251:64:5;1577:7:6;;:18;;1585:3;;1590:4;;1577:18;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1605:13:6;;-1:-1:-1;;;1605:13:6;;-1:-1:-1;;;;;3391:32:24;;1605:13:6;;;3373:51:24;-1:-1:-1;;;;;;;;;;;251:64:5;-1:-1:-1;1605:8:6;;-1:-1:-1;3346:18:24;;1605:13:6;3227:203:24;5469:178:4;5550:1;5545;:6;5541:100;;-1:-1:-1;;;;;;;;;;;5598:3:4;5572:30;;;;;;:::i;:::-;;;;;;;;5616:14;5625:1;5628;5616:8;:14::i;3897:185::-;3984:1;-1:-1:-1;;;;;3979:6:4;:1;-1:-1:-1;;;;;3979:6:4;;3975:101;;-1:-1:-1;;;;;;;;;;;4033:3:4;4006:31;;;;;;:::i;:::-;;;;;;;;4051:14;4060:1;4063;4051:8;:14::i;5514:110:8:-;5560:57;5613:2;5576:40;;;;;;12174:25:24;;12162:2;12147:18;;12020:185;5576:40:8;;;;-1:-1:-1;;5576:40:8;;;;;;;;;;;;;;-1:-1:-1;;;;;5576:40:8;-1:-1:-1;;;5576:40:8;;;5560:15;:57::i;19342:156:6:-;19448:12;;;:22;;-1:-1:-1;;;;;;19448:22:6;-1:-1:-1;;;;;19448:22:6;;;;;;;;;;:12;19342:156::o;20626:120::-;20706:33;20720:4;20734:3;20706:13;:33::i;14688:344:4:-;14824:1;14807:19;;;;;;;;:::i;:::-;;;;;;;;;;;;;14797:30;;;;;;14790:1;14773:19;;;;;;;;:::i;:::-;;;;;;;;;;;;;14763:30;;;;;;:64;14759:267;;14848:43;;;;;19691:2:24;19673:21;;;19730:2;19710:18;;;19703:30;19769:34;19764:2;19749:18;;19742:62;-1:-1:-1;;;19835:2:24;19820:18;;19813:34;19879:3;19864:19;;19489:400;14848:43:4;;;;;;;;-1:-1:-1;;;;;;;;;;;14941:1:4;14910:33;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;;;;;;;14993:1:4;14962:33;;;;;;:::i;:::-;;;;;;;;15009:6;:4;:6::i;15037:254::-;15192:1;15175:19;;;;;;;;:::i;:::-;;;;;;;;;;;;;15165:30;;;;;;15158:1;15141:19;;;;;;;;:::i;:::-;;;;;;;;;;;;;15131:30;;;;;;:64;15127:158;;-1:-1:-1;;;;;;;;;;;15242:3:4;15216:30;;;;;;:::i;:::-;;;;;;;;15260:14;15269:1;15272;15260:8;:14::i;5873:116:8:-;5938:43;;-1:-1:-1;;;;;3391:32:24;;5938:43:8;;;3373:51:24;5922:60:8;;3346:18:24;;5938:43:8;;;-1:-1:-1;;5938:43:8;;;;;;;;;;;;;;-1:-1:-1;;;;;5938:43:8;-1:-1:-1;;;5938:43:8;;;5922:15;:60::i;5202:262:4:-;5264:1;5259;:6;5255:203;;5286:41;;;;;21314:2:24;21296:21;;;21353:2;21333:18;;;21326:30;21392:34;21387:2;21372:18;;21365:62;-1:-1:-1;;;21458:2:24;21443:18;;21436:32;21500:3;21485:19;;21112:398;5286:41:4;;;;;;;;5346:31;5375:1;5346:31;;;;;;:::i;:::-;;;;;;;;5396;5425:1;5396:31;;;;;;:::i;3615:277::-;3683:1;-1:-1:-1;;;;;3678:6:4;:1;-1:-1:-1;;;;;3678:6:4;;3674:212;;3705:44;;;;;22423:2:24;22405:21;;;22462:2;22442:18;;;22435:30;22501:34;22496:2;22481:18;;22474:62;-1:-1:-1;;;22567:2:24;22552:18;;22545:35;22612:3;22597:19;;22221:401;3705:44:4;;;;;;;;3768:34;3800:1;3768:34;;;;;;:::i;:::-;;;;;;;;3821;3853:1;3821:34;;;;;;:::i;181:376:8:-;275:14;;131:42;448:2;435:16;;251:21;;275:14;435:16;131:42;484:5;473:68;464:77;;401:150;;181:376;:::o;20980:1089:6:-;21096:12;;;;21132:9;;;;21173:11;;;;21217:10;;;21194:33;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;21096:12:6;;;;21132:9;;;;;;21082:11;;21194:33;;21217:10;;21194:33;;21217:10;21194:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21238:17;21275:4;21281:12;21289:3;21281:7;:12::i;:::-;21258:36;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;21258:36:6;;;;;;;;;-1:-1:-1;;;;;21309:15:6;;;;;;:10;;;21258:36;21309:15;;;;;;-1:-1:-1;;;;;;21309:21:6;;;;;;;;;21258:36;;-1:-1:-1;21309:21:6;;:15;;21341:34;;21358:3;;21363:11;;21341:34;;:::i;:::-;;;;-1:-1:-1;;21341:34:6;;;;;;;;;21331:45;;21341:34;21331:45;;;;21309:68;;;;;;;;;;-1:-1:-1;21309:68:6;;;;21304:110;;21393:10;21398:4;21393;:10::i;:::-;;21304:110;-1:-1:-1;;;;;21446:15:6;;21423:12;21446:15;;;;;;;;;;;-1:-1:-1;;;;;;21446:21:6;;;;;;;;;21478:34;;21446:21;;21423:12;;21478:34;;21495:3;;21500:11;;21478:34;;:::i;:::-;;;;;;;;;;;;;21468:45;;;;;;21446:68;;;;;;;;;;;;21438:77;;21423:92;;21526:12;21565:17;21586:3;-1:-1:-1;;;;;21586:14:6;21601:4;21586:20;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;21562:44:6;-1:-1:-1;21627:36:6;;-1:-1:-1;21562:44:6;21648:14;21651:11;21648:2;:14;:::i;:::-;21627;:36::i;:::-;21698:28;;-1:-1:-1;;;21698:28:6;;21620:43;;-1:-1:-1;21683:12:6;;-1:-1:-1;;;;;;;;;;;;21698:17:6;;;:28;;21716:3;;21721:4;;21698:28;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;21683:43;;21749:4;21741;:12;21737:172;;21769:129;;-1:-1:-1;;;21769:129:6;;;;;;;:::i;:::-;21918:34;;-1:-1:-1;;;21918:34:6;;-1:-1:-1;;;;;;;;;;;21918:18:6;;;:34;;21937:3;;21942:4;;21948:3;;21918:34;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;21969:12:6;;;21962:19;;-1:-1:-1;;;;;;21962:19:6;;;-1:-1:-1;21998:9:6;;;21991:16;;-1:-1:-1;;21991:16:6;;;22017:17;-1:-1:-1;22024:10:6;;21969:12;22017:17;:::i;:::-;22051:4;:11;;22044:18;;;21072:997;;;;;;;;20980:1089;;:::o;2410:424:4:-;-1:-1:-1;;;;;;;;;;;2978:55:4;3059:16;2445:359;;2645:67;;2482:11;;-1:-1:-1;;;;;;;;;;;1671:64:4;2579:43;;2645:67;;1671:64;;-1:-1:-1;;;2670:17:4;2705:4;;2645:67;;;:::i;:::-;;;;-1:-1:-1;;2645:67:4;;;;;;;;;;2534:196;;;2645:67;2534:196;;:::i;:::-;;;;-1:-1:-1;;2534:196:4;;;;;;;;;;2499:245;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;2445:359:4;2813:7;:14;;-1:-1:-1;;2813:14:4;;;;;2410:424::o;23413:397:6:-;23472:12;23500:19;23532:1;:8;23543:2;23532:13;;;;:::i;:::-;23522:24;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;23522:24:6;;23500:46;;23561:9;23556:224;23580:1;:8;23576:1;:12;23556:224;;;23609:9;23621:1;23623;23621:4;;;;;;;;:::i;:::-;;;;;;;23609:16;;23754:1;23748;23744:2;23740:10;23736:2;23732:19;23724:6;23720:32;23713:43;23695:75;23590:3;;;;;:::i;:::-;;;;23556:224;;16122:3214;16246:12;;;;16282:9;;;;16323:11;;;;16367:10;;;16344:33;;;;;;;;;;;;;;;;;;;16209:7;;-1:-1:-1;;;;;16246:12:6;;16282:9;;;16323:11;16209:7;;16344:33;;16367:10;;16344:33;;;16367:10;16344:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;16428:15:6;;;;;;:10;;;:15;;;;;;;;-1:-1:-1;;;;;;16428:21:6;;;;;;;;;16460:34;;16344:33;;-1:-1:-1;16428:21:6;:15;;-1:-1:-1;16460:34:6;;-1:-1:-1;16344:33:6;;16482:11;;16460:34;;:::i;:::-;;;;-1:-1:-1;;16460:34:6;;;;;;;;;16450:45;;16460:34;16450:45;;;;16428:68;;;;;;;;;;-1:-1:-1;16428:68:6;;;;16424:174;;;-1:-1:-1;;;;;16519:15:6;;:10;:15;;;;;;;;;;;-1:-1:-1;;;;;;16519:21:6;;;;;;;;;16551:34;;16519:21;;:10;16551:34;;16568:3;;16573:11;;16551:34;;:::i;:::-;;;;;;;;;;;;;16541:45;;;;;;16519:68;;;;;;;;;;;;16512:75;;;;;;16122:3214;;;:::o;16424:174::-;16607:17;16644:4;16650:12;16658:3;16650:7;:12::i;:::-;16627:36;;;;;;;;;:::i;:::-;;;;;;;;;;;;;16607:56;;-1:-1:-1;;;;;;;;;;;15396:37:6;;-1:-1:-1;;;;;16673:19:6;;:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16704:12;16743:17;16764:3;-1:-1:-1;;;;;16764:14:6;16779:4;16764:20;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;16740:44:6;-1:-1:-1;16805:36:6;;-1:-1:-1;16740:44:6;16826:14;16829:11;16826:2;:14;:::i;16805:36::-;16891:35;;-1:-1:-1;;;16891:35:6;;-1:-1:-1;;;;;3391:32:24;;16891:35:6;;;3373:51:24;16798:43:6;;-1:-1:-1;16863:22:6;;-1:-1:-1;;;;;;;;;;;;16891:21:6;;;3346:18:24;;16891:35:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;16891:35:6;;;;;;;;;;;;:::i;:::-;16862:64;;;16940:5;:12;16956:1;16940:17;16936:2058;;16973:12;-1:-1:-1;;;;;;;;;;;15396:37:6;;-1:-1:-1;;;;;16988:17:6;;17006:3;17011:5;17017:1;17011:8;;;;;;;;:::i;:::-;;;;;;;16988:32;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;16973:47;-1:-1:-1;16973:47:6;17034:106;;17081:44;17102:3;17115:5;17121:1;17115:8;;;;;;;;:::i;:::-;;;;;;;17107:17;;17081:44;;;;;;;:::i;:::-;;;;;;;;17034:106;17165:4;17157;:12;17153:180;;17189:129;;-1:-1:-1;;;17189:129:6;;;;;;;:::i;:::-;17351:86;17361:3;17366:4;17399:3;17404:11;17382:34;;;;;;;;;:::i;:::-;;;;;;;;;;;;;17372:45;;;;;;17427:5;17433:1;17427:8;;;;;;;;:::i;:::-;;;;;;;17419:17;;17351:86;;;;;;;;;:::i;:::-;;;;;;;;17530:5;17536:1;17530:8;;;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;17451:15:6;;17522:17;17451:15;;;;;;;;;;-1:-1:-1;;;;;;17451:21:6;;;;;;;;;17483:34;;17530:8;;17451:21;;17483:34;;17500:3;;17505:11;;17483:34;;:::i;:::-;;;;-1:-1:-1;;17483:34:6;;;;;;;;;17473:45;;17483:34;17473:45;;;;17451:68;;;;;;;;;;;;-1:-1:-1;17451:68:6;;;:88;;;;-1:-1:-1;;;;;17553:15:6;;;;17624:4;17553:10;;;:15;;;;;-1:-1:-1;;;;;;17553:21:6;;;;;;;;;17585:34;;17624:4;;-1:-1:-1;17585:34:6;;17602:3;;17607:11;;17585:34;;:::i;:::-;;;;;;;-1:-1:-1;;17585:34:6;;;;;;17575:45;;17585:34;17575:45;;;;17553:68;;;;;;;;;;-1:-1:-1;17553:68:6;:75;;-1:-1:-1;;17553:75:6;;;;;;;;;;-1:-1:-1;16936:2058:6;;;17664:1;17649:5;:12;:16;17645:1349;;;17686:9;17681:1190;17705:5;:12;17701:1;:16;17681:1190;;;17742:12;-1:-1:-1;;;;;;;;;;;15396:37:6;;-1:-1:-1;;;;;17757:17:6;;17775:3;17780:5;17786:1;17780:8;;;;;;;;:::i;:::-;;;;;;;17757:32;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;17742:47;-1:-1:-1;17742:47:6;17807:114;;17858:44;17879:3;17892:5;17898:1;17892:8;;;;;;;;:::i;:::-;;;;;;;17884:17;;17858:44;;;;;;;:::i;:::-;;;;;;;;17807:114;-1:-1:-1;;;;;;;;;;;15396:37:6;;-1:-1:-1;;;;;17963:18:6;;17982:3;17987:5;17993:1;17987:8;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;17963:53:6;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18034:12;18064:17;18139:3;-1:-1:-1;;;;;18139:14:6;18154:4;18139:20;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;18121:38:6;;-1:-1:-1;18121:38:6;-1:-1:-1;18188:36:6;18121:38;18209:14;18212:11;18209:2;:14;:::i;18188:36::-;18181:43;;18265:7;:37;;;;;-1:-1:-1;;;18276:4:6;:26;18265:37;18261:539;;;18400:86;18410:3;18415:4;18448:3;18453:11;18431:34;;;;;;;;;:::i;:::-;;;;;;;;;;;;;18421:45;;;;;;18476:5;18482:1;18476:8;;;;;;;;:::i;:::-;;;;;;;18468:17;;18400:86;;;;;;;;;:::i;:::-;;;;;;;;18587:5;18593:1;18587:8;;;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;18508:15:6;;18579:17;18508:15;;;;;;;;;;-1:-1:-1;;;;;;18508:21:6;;;;;;;;;18540:34;;18587:8;;18508:21;;18540:34;;18557:3;;18562:11;;18540:34;;:::i;:::-;;;;;;;;;;;;;18530:45;;;;;;18508:68;;;;;;;;;;;:88;;;;18689:4;18618;:10;;:15;18629:3;-1:-1:-1;;;;;18618:15:6;-1:-1:-1;;;;;18618:15:6;;;;;;;;;;;;:21;18634:4;-1:-1:-1;;;;;18618:21:6;;-1:-1:-1;;;;;18618:21:6;;;;;;;;;;;;;:68;18667:3;18672:11;18650:34;;;;;;;;;:::i;:::-;;;;;;;;;;;;;18640:45;;;;;;18618:68;;;;;;;;;;;;:75;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;15396:37:6;;-1:-1:-1;;;;;18715:18:6;;18734:3;18739:5;18745:1;18739:8;;;;;;;;:::i;:::-;;;;;;;18749:4;18715:39;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18776:5;;;;;18261:539;-1:-1:-1;;;;;;;;;;;15396:37:6;;-1:-1:-1;;;;;18817:18:6;;18836:3;18841:5;18847:1;18841:8;;;;;;;;:::i;:::-;;;;;;;18851:4;18817:39;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17724:1147;;;17719:3;;;;;:::i;:::-;;;;17681:1190;;;;17645:1349;;;18901:82;;;-1:-1:-1;;;18901:82:6;;27350:2:24;18901:82:6;;;27332:21:24;27369:18;;;27362:30;;;;27428:34;27408:18;;;27401:62;27499:34;27479:18;;;27472:62;27551:19;;18901:82:6;27148:428:24;18901:82:6;-1:-1:-1;;;;;19012:15:6;;;;;;:10;;;:15;;;;;;;;-1:-1:-1;;;;;;19012:21:6;;;;;;;;;19044:34;;19012:21;;:15;19044:34;;19061:3;;19066:11;;19044:34;;:::i;:::-;;;;-1:-1:-1;;19044:34:6;;;;;;;;;19034:45;;19044:34;19034:45;;;;19012:68;;;;;;;;;;-1:-1:-1;19012:68:6;;;;19004:128;;;;-1:-1:-1;;;19004:128:6;;27783:2:24;19004:128:6;;;27765:21:24;27822:2;27802:18;;;27795:30;27861:34;27841:18;;;27834:62;-1:-1:-1;;;27912:18:24;;;27905:45;27967:19;;19004:128:6;27581:411:24;19004:128:6;19150:12;;;19143:19;;-1:-1:-1;;;;;;19143:19:6;;;19179:9;;;19172:16;;-1:-1:-1;;19172:16:6;;;19198:17;-1:-1:-1;19205:10:6;;19150:12;19198:17;:::i;:::-;19225:18;19232:11;;;19225:18;;;-1:-1:-1;;;;;19261:15:6;;;;;;;;;;;;-1:-1:-1;;;;;;19261:21:6;;;;;;;;;19293:34;;19261:21;;19225:18;19293:34;;19310:3;;19315:11;;19293:34;;:::i;:::-;;;;;;;;;;;;;19283:45;;;;;;19261:68;;;;;;;;;;;;19254:75;;;;;;;;;16122:3214;;;:::o;23110:297::-;23184:7;23203:11;23225;23250:2;23239:1;:8;:13;:29;;23260:1;:8;23239:29;;;23255:2;23239:29;23225:43;;23283:6;23278:103;23299:3;23295:1;:7;23278:103;;;23364:5;:1;23368;23364:5;:::i;:::-;23338:1;23340:10;23349:1;23340:6;:10;:::i;:::-;23338:13;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;;23338:13:6;23330:40;;23323:47;;;;;23304:3;;;;:::i;:::-;;;;23278:103;;;-1:-1:-1;23397:3:6;;23110:297;-1:-1:-1;;;;23110:297:6:o;-1:-1:-1:-;;;;;;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;14:131:24:-;-1:-1:-1;;;;;89:31:24;;79:42;;69:70;;135:1;132;125:12;150:315;218:6;226;279:2;267:9;258:7;254:23;250:32;247:52;;;295:1;292;285:12;247:52;334:9;321:23;353:31;378:5;353:31;:::i;:::-;403:5;455:2;440:18;;;;427:32;;-1:-1:-1;;;150:315:24:o;470:247::-;529:6;582:2;570:9;561:7;557:23;553:32;550:52;;;598:1;595;588:12;550:52;637:9;624:23;656:31;681:5;656:31;:::i;:::-;706:5;470:247;-1:-1:-1;;;470:247:24:o;722:388::-;790:6;798;851:2;839:9;830:7;826:23;822:32;819:52;;;867:1;864;857:12;819:52;906:9;893:23;925:31;950:5;925:31;:::i;:::-;975:5;-1:-1:-1;1032:2:24;1017:18;;1004:32;1045:33;1004:32;1045:33;:::i;:::-;1097:7;1087:17;;;722:388;;;;;:::o;1115:127::-;1176:10;1171:3;1167:20;1164:1;1157:31;1207:4;1204:1;1197:15;1231:4;1228:1;1221:15;1247:257;1319:4;1313:11;;;1351:17;;1398:18;1383:34;;1419:22;;;1380:62;1377:88;;;1445:18;;:::i;:::-;1481:4;1474:24;1247:257;:::o;1509:275::-;1580:2;1574:9;1645:2;1626:13;;-1:-1:-1;;1622:27:24;1610:40;;1680:18;1665:34;;1701:22;;;1662:62;1659:88;;;1727:18;;:::i;:::-;1763:2;1756:22;1509:275;;-1:-1:-1;1509:275:24:o;1789:187::-;1838:4;1871:18;1863:6;1860:30;1857:56;;;1893:18;;:::i;:::-;-1:-1:-1;1959:2:24;1938:15;-1:-1:-1;;1934:29:24;1965:4;1930:40;;1789:187::o;1981:338::-;2046:5;2075:53;2091:36;2120:6;2091:36;:::i;:::-;2075:53;:::i;:::-;2066:62;;2151:6;2144:5;2137:21;2191:3;2182:6;2177:3;2173:16;2170:25;2167:45;;;2208:1;2205;2198:12;2167:45;2257:6;2252:3;2245:4;2238:5;2234:16;2221:43;2311:1;2304:4;2295:6;2288:5;2284:18;2280:29;2273:40;1981:338;;;;;:::o;2324:222::-;2367:5;2420:3;2413:4;2405:6;2401:17;2397:27;2387:55;;2438:1;2435;2428:12;2387:55;2460:80;2536:3;2527:6;2514:20;2507:4;2499:6;2495:17;2460:80;:::i;2551:671::-;2638:6;2646;2699:2;2687:9;2678:7;2674:23;2670:32;2667:52;;;2715:1;2712;2705:12;2667:52;2755:9;2742:23;2784:18;2825:2;2817:6;2814:14;2811:34;;;2841:1;2838;2831:12;2811:34;2864:50;2906:7;2897:6;2886:9;2882:22;2864:50;:::i;:::-;2854:60;;2967:2;2956:9;2952:18;2939:32;2923:48;;2996:2;2986:8;2983:16;2980:36;;;3012:1;3009;3002:12;2980:36;-1:-1:-1;3035:24:24;;3090:4;3082:13;;3078:27;-1:-1:-1;3068:55:24;;3119:1;3116;3109:12;3068:55;3142:74;3208:7;3203:2;3190:16;3185:2;3181;3177:11;3142:74;:::i;:::-;3132:84;;;2551:671;;;;;:::o;3435:180::-;3494:6;3547:2;3535:9;3526:7;3522:23;3518:32;3515:52;;;3563:1;3560;3553:12;3515:52;-1:-1:-1;3586:23:24;;3435:180;-1:-1:-1;3435:180:24:o;3839:456::-;3916:6;3924;3932;3985:2;3973:9;3964:7;3960:23;3956:32;3953:52;;;4001:1;3998;3991:12;3953:52;4040:9;4027:23;4059:31;4084:5;4059:31;:::i;:::-;4109:5;-1:-1:-1;4166:2:24;4151:18;;4138:32;4179:33;4138:32;4179:33;:::i;:::-;3839:456;;4231:7;;-1:-1:-1;;;4285:2:24;4270:18;;;;4257:32;;3839:456::o;4300:118::-;4386:5;4379:13;4372:21;4365:5;4362:32;4352:60;;4408:1;4405;4398:12;4423:592;4506:6;4514;4522;4530;4583:3;4571:9;4562:7;4558:23;4554:33;4551:53;;;4600:1;4597;4590:12;4551:53;4639:9;4626:23;4658:31;4683:5;4658:31;:::i;:::-;4708:5;-1:-1:-1;4765:2:24;4750:18;;4737:32;4778:33;4737:32;4778:33;:::i;:::-;4830:7;-1:-1:-1;4884:2:24;4869:18;;4856:32;;-1:-1:-1;4940:2:24;4925:18;;4912:32;4953:30;4912:32;4953:30;:::i;:::-;4423:592;;;;-1:-1:-1;4423:592:24;;-1:-1:-1;;4423:592:24:o;5020:322::-;5089:6;5142:2;5130:9;5121:7;5117:23;5113:32;5110:52;;;5158:1;5155;5148:12;5110:52;5198:9;5185:23;5231:18;5223:6;5220:30;5217:50;;;5263:1;5260;5253:12;5217:50;5286;5328:7;5319:6;5308:9;5304:22;5286:50;:::i;:::-;5276:60;5020:322;-1:-1:-1;;;;5020:322:24:o;6520:184::-;6590:6;6643:2;6631:9;6622:7;6618:23;6614:32;6611:52;;;6659:1;6656;6649:12;6611:52;-1:-1:-1;6682:16:24;;6520:184;-1:-1:-1;6520:184:24:o;7270:274::-;-1:-1:-1;;;;;7462:32:24;;;;7444:51;;7526:2;7511:18;;7504:34;7432:2;7417:18;;7270:274::o;7839:245::-;7906:6;7959:2;7947:9;7938:7;7934:23;7930:32;7927:52;;;7975:1;7972;7965:12;7927:52;8007:9;8001:16;8026:28;8048:5;8026:28;:::i;9201:258::-;9273:1;9283:113;9297:6;9294:1;9291:13;9283:113;;;9373:11;;;9367:18;9354:11;;;9347:39;9319:2;9312:10;9283:113;;;9414:6;9411:1;9408:13;9405:48;;;-1:-1:-1;;9449:1:24;9431:16;;9424:27;9201:258::o;9464:::-;9506:3;9544:5;9538:12;9571:6;9566:3;9559:19;9587:63;9643:6;9636:4;9631:3;9627:14;9620:4;9613:5;9609:16;9587:63;:::i;:::-;9704:2;9683:15;-1:-1:-1;;9679:29:24;9670:39;;;;9711:4;9666:50;;9464:258;-1:-1:-1;;9464:258:24:o;9727:220::-;9876:2;9865:9;9858:21;9839:4;9896:45;9937:2;9926:9;9922:18;9914:6;9896:45;:::i;9952:308::-;10027:5;10056:53;10072:36;10101:6;10072:36;:::i;10056:53::-;10047:62;;10132:6;10125:5;10118:21;10172:3;10163:6;10158:3;10154:16;10151:25;10148:45;;;10189:1;10186;10179:12;10148:45;10202:52;10247:6;10240:4;10233:5;10229:16;10224:3;10202:52;:::i;10265:457::-;10344:6;10397:2;10385:9;10376:7;10372:23;10368:32;10365:52;;;10413:1;10410;10403:12;10365:52;10446:9;10440:16;10479:18;10471:6;10468:30;10465:50;;;10511:1;10508;10501:12;10465:50;10534:22;;10587:4;10579:13;;10575:27;-1:-1:-1;10565:55:24;;10616:1;10613;10606:12;10565:55;10639:77;10708:7;10703:2;10697:9;10692:2;10688;10684:11;10639:77;:::i;10727:466::-;10902:3;10940:6;10934:13;10956:53;11002:6;10997:3;10990:4;10982:6;10978:17;10956:53;:::i;:::-;11072:13;;11031:16;;;;11094:57;11072:13;11031:16;11128:4;11116:17;;11094:57;:::i;:::-;11167:20;;10727:466;-1:-1:-1;;;;10727:466:24:o;12210:251::-;12280:6;12333:2;12321:9;12312:7;12308:23;12304:32;12301:52;;;12349:1;12346;12339:12;12301:52;12381:9;12375:16;12400:31;12425:5;12400:31;:::i;12466:127::-;12527:10;12522:3;12518:20;12515:1;12508:31;12558:4;12555:1;12548:15;12582:4;12579:1;12572:15;12598:125;12638:4;12666:1;12663;12660:8;12657:34;;;12671:18;;:::i;:::-;-1:-1:-1;12708:9:24;;12598:125::o;12910:127::-;12971:10;12966:3;12962:20;12959:1;12952:31;13002:4;12999:1;12992:15;13026:4;13023:1;13016:15;13042:1081;13312:4;13358:1;13354;13349:3;13345:11;13341:19;13399:2;13391:6;13387:15;13376:9;13369:34;13422:2;13460;13455;13444:9;13440:18;13433:30;13486:45;13527:2;13516:9;13512:18;13504:6;13486:45;:::i;:::-;13588:22;;;13550:2;13568:18;;;13561:50;;;;13660:13;;13682:22;;;13758:15;;;;13720;;;13791:1;13801:296;13815:6;13812:1;13809:13;13801:296;;;13874:13;;13916:9;;13912:18;;13900:31;;13975:11;;13969:18;-1:-1:-1;;;;;13965:51:24;13951:12;;;13944:73;14072:15;;;;14037:12;;;;13837:1;13830:9;13801:296;;;-1:-1:-1;14114:3:24;;13042:1081;-1:-1:-1;;;;;;;;;;13042:1081:24:o;14426:274::-;14555:3;14593:6;14587:13;14609:53;14655:6;14650:3;14643:4;14635:6;14631:17;14609:53;:::i;:::-;14678:16;;;;;14426:274;-1:-1:-1;;14426:274:24:o;14705:128::-;14745:3;14776:1;14772:6;14769:1;14766:13;14763:39;;;14782:18;;:::i;:::-;-1:-1:-1;14818:9:24;;14705:128::o;15992:371::-;-1:-1:-1;;;;;;16177:33:24;;16165:46;;16234:13;;16147:3;;16256:61;16234:13;16306:1;16297:11;;16290:4;16278:17;;16256:61;:::i;:::-;16337:16;;;;16355:1;16333:24;;15992:371;-1:-1:-1;;;15992:371:24:o;16368:188::-;16433:4;16466:18;16458:6;16455:30;16452:56;;;16488:18;;:::i;:::-;-1:-1:-1;16533:1:24;16529:14;16545:4;16525:25;;16368:188::o;16561:1458::-;16678:6;16709:2;16752;16740:9;16731:7;16727:23;16723:32;16720:52;;;16768:1;16765;16758:12;16720:52;16801:9;16795:16;16834:18;16826:6;16823:30;16820:50;;;16866:1;16863;16856:12;16820:50;16889:22;;16942:4;16934:13;;16930:27;-1:-1:-1;16920:55:24;;16971:1;16968;16961:12;16920:55;17000:2;16994:9;17023:65;17039:48;17084:2;17039:48;:::i;17023:65::-;17122:15;;;17204:1;17200:10;;;;17192:19;;17188:28;;;17153:12;;;;17228:19;;;17225:39;;;17260:1;17257;17250:12;17225:39;17284:11;;;;17304:685;17320:6;17315:3;17312:15;17304:685;;;17402:4;17396:3;17387:7;17383:17;17379:28;17376:118;;;17448:1;17477:2;17473;17466:14;17376:118;17520:22;;:::i;:::-;17576:3;17570:10;17593:33;17618:7;17593:33;:::i;:::-;17639:22;;17695:12;;;17689:19;-1:-1:-1;;;;;17743:40:24;;17731:53;;17721:151;;17826:1;17855:2;17851;17844:14;17721:151;17892:14;;;17885:31;17929:18;;17346:4;17337:14;;;;;17967:12;;;;17304:685;;;18008:5;16561:1458;-1:-1:-1;;;;;;;16561:1458:24:o;18757:446::-;19007:2;18996:9;18989:21;19046:1;19041:2;19030:9;19026:18;19019:29;-1:-1:-1;;;19079:2:24;19068:9;19064:18;19057:35;19130:3;19123:4;19112:9;19108:20;19101:33;18970:4;19151:46;19192:3;19181:9;19177:19;19169:6;19151:46;:::i;20058:440::-;20308:2;20297:9;20290:21;20271:4;20334:49;20379:2;20368:9;20364:18;19971:2;19959:15;;-1:-1:-1;;;19999:4:24;19990:14;;19983:36;20044:2;20035:12;;19894:159;20334:49;20431:9;20423:6;20419:22;20414:2;20403:9;20399:18;20392:50;20459:33;20485:6;20477;20459:33;:::i;20667:440::-;20917:2;20906:9;20899:21;20880:4;20943:49;20988:2;20977:9;20973:18;20580:2;20568:15;;-1:-1:-1;;;20608:4:24;20599:14;;20592:36;20653:2;20644:12;;20503:159;21515:348;21745:2;21734:9;21727:21;21708:4;21765:49;21810:2;21799:9;21795:18;19971:2;19959:15;;-1:-1:-1;;;19999:4:24;19990:14;;19983:36;20044:2;20035:12;;19894:159;21765:49;21757:57;;21850:6;21845:2;21834:9;21830:18;21823:34;21515:348;;;;:::o;21868:::-;22098:2;22087:9;22080:21;22061:4;22118:49;22163:2;22152:9;22148:18;20580:2;20568:15;;-1:-1:-1;;;20608:4:24;20599:14;;20592:36;20653:2;20644:12;;20503:159;22627:374;22857:2;22846:9;22839:21;22820:4;22877:49;22922:2;22911:9;22907:18;19971:2;19959:15;;-1:-1:-1;;;19999:4:24;19990:14;;19983:36;20044:2;20035:12;;19894:159;22877:49;-1:-1:-1;;;;;22962:32:24;;;;22957:2;22942:18;;;;22935:60;;;;-1:-1:-1;22869:57:24;22627:374::o;23006:::-;23236:2;23225:9;23218:21;23199:4;23256:49;23301:2;23290:9;23286:18;20580:2;20568:15;;-1:-1:-1;;;20608:4:24;20599:14;;20592:36;20653:2;20644:12;;20503:159;23385:610;23631:13;;23574:3;;23605;;23684:4;23711:15;;;23574:3;23754:175;23768:6;23765:1;23762:13;23754:175;;;23831:13;;23817:28;;23867:14;;;;23904:15;;;;23790:1;23783:9;23754:175;;;-1:-1:-1;;23938:21:24;;;-1:-1:-1;23975:14:24;;;;;-1:-1:-1;;;23385:610:24:o;24000:168::-;24040:7;24106:1;24102;24098:6;24094:14;24091:1;24088:21;24083:1;24076:9;24069:17;24065:45;24062:71;;;24113:18;;:::i;:::-;-1:-1:-1;24153:9:24;;24000:168::o;24362:556::-;24564:2;24546:21;;;24603:3;24583:18;;;24576:31;24643:34;24638:2;24623:18;;24616:62;24714:34;24709:2;24694:18;;24687:62;24786:34;24780:3;24765:19;;24758:63;-1:-1:-1;;;24852:3:24;24837:19;;24830:46;24908:3;24893:19;;24362:556::o;24923:345::-;-1:-1:-1;;;;;25143:32:24;;;;25125:51;;25207:2;25192:18;;25185:34;;;;25250:2;25235:18;;25228:34;25113:2;25098:18;;24923:345::o;25273:135::-;25312:3;25333:17;;;25330:43;;25353:18;;:::i;:::-;-1:-1:-1;25400:1:24;25389:13;;25273:135::o;25413:664::-;25478:5;25531:3;25524:4;25516:6;25512:17;25508:27;25498:55;;25549:1;25546;25539:12;25498:55;25578:6;25572:13;25604:4;25628:65;25644:48;25689:2;25644:48;:::i;25628:65::-;25727:15;;;25813:1;25809:10;;;;25797:23;;25793:32;;;25758:12;;;;25837:15;;;25834:35;;;25865:1;25862;25855:12;25834:35;25901:2;25893:6;25889:15;25913:135;25929:6;25924:3;25921:15;25913:135;;;25995:10;;25983:23;;26026:12;;;;25946;;25913:135;;;-1:-1:-1;26066:5:24;25413:664;-1:-1:-1;;;;;;25413:664:24:o;26082:614::-;26211:6;26219;26272:2;26260:9;26251:7;26247:23;26243:32;26240:52;;;26288:1;26285;26278:12;26240:52;26321:9;26315:16;26350:18;26391:2;26383:6;26380:14;26377:34;;;26407:1;26404;26397:12;26377:34;26430:72;26494:7;26485:6;26474:9;26470:22;26430:72;:::i;:::-;26420:82;;26548:2;26537:9;26533:18;26527:25;26511:41;;26577:2;26567:8;26564:16;26561:36;;;26593:1;26590;26583:12;26561:36;;26616:74;26682:7;26671:8;26660:9;26656:24;26616:74;:::i;26701:442::-;-1:-1:-1;;;;;26948:32:24;;;;26930:51;;-1:-1:-1;;;;;;27017:33:24;;;;27012:2;26997:18;;26990:61;27082:2;27067:18;;27060:34;27125:2;27110:18;;27103:34;26917:3;26902:19;;26701:442::o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "IS_SCRIPT()": "f8ccbf47",
    "IS_TEST()": "fa7626d4",
    "deal(address,address,uint256)": "6bce989b",
    "deal(address,address,uint256,bool)": "97754ae9",
    "deal(address,uint256)": "c88a5e6d",
    "deployCode(string)": "9a8325a0",
    "deployCode(string,bytes)": "29ce9dde",
    "failed()": "ba414fa6",
    "hoax(address)": "233240ee",
    "hoax(address,address)": "29a9e300",
    "hoax(address,address,uint256)": "af9bbe5f",
    "hoax(address,uint256)": "e9a79a7b",
    "rewind(uint256)": "2d6c17a3",
    "setUp()": "0a9254e4",
    "skip(uint256)": "b9c071b4",
    "startHoax(address)": "6f597075",
    "startHoax(address,address)": "d06d8229",
    "startHoax(address,address,uint256)": "3bf82db1",
    "startHoax(address,uint256)": "108554f2",
    "test_bob_disintegrate_NFT_and_ERC20_tokens()": "050a80fa",
    "test_fetch_token_uri_and_royalties()": "cd4a7a3c",
    "test_mint_ERC20_tokens_to_validator()": "69b3ddac",
    "test_mint_an_erc721_token_to_alice()": "3d6580e1",
    "test_name_and_symbol()": "9b1fe7eb",
    "test_transfer_NFT_to_bob()": "2aae3c34",
    "test_validator_add_ERC20_tokens_to_alice_NFT()": "1db59920",
    "tip(address,address,uint256)": "d82555f1",
    "vm()": "3a768463"
  },
  "ast": {
    "absolutePath": "foundry-test/piNFT.t.sol",
    "id": 1009,
    "exportedSymbols": {
      "Address": [
        24472
      ],
      "Context": [
        24494
      ],
      "ContractTest": [
        1008
      ],
      "Counters": [
        24568
      ],
      "DSTest": [
        2795
      ],
      "ERC165": [
        24818
      ],
      "ERC20": [
        22892
      ],
      "ERC721": [
        23856
      ],
      "ERC721URIStorage": [
        24115
      ],
      "IERC165": [
        24830
      ],
      "IERC20": [
        22970
      ],
      "IERC20Metadata": [
        22995
      ],
      "IERC721": [
        23972
      ],
      "IERC721Metadata": [
        24142
      ],
      "IERC721Receiver": [
        23990
      ],
      "LibShare": [
        538
      ],
      "SampleERC20": [
        559
      ],
      "Script": [
        3031
      ],
      "StdStorage": [
        4448
      ],
      "Strings": [
        24794
      ],
      "Test": [
        4350
      ],
      "Vm": [
        6177
      ],
      "console": [
        14241
      ],
      "console2": [
        22305
      ],
      "piNFT": [
        530
      ],
      "stdError": [
        4420
      ],
      "stdMath": [
        5697
      ],
      "stdStorage": [
        5550
      ]
    },
    "nodeType": "SourceUnit",
    "src": "39:4109:3",
    "nodes": [
      {
        "id": 561,
        "nodeType": "PragmaDirective",
        "src": "39:23:3",
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 562,
        "nodeType": "ImportDirective",
        "src": "64:28:3",
        "absolutePath": "lib/forge-std/src/Test.sol",
        "file": "forge-std/Test.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 1009,
        "sourceUnit": 5698,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 563,
        "nodeType": "ImportDirective",
        "src": "93:31:3",
        "absolutePath": "lib/forge-std/src/console.sol",
        "file": "forge-std/console.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 1009,
        "sourceUnit": 14242,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 564,
        "nodeType": "ImportDirective",
        "src": "127:29:3",
        "absolutePath": "contracts/piNFT.sol",
        "file": "contracts/piNFT.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 1009,
        "sourceUnit": 531,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 565,
        "nodeType": "ImportDirective",
        "src": "157:41:3",
        "absolutePath": "contracts/utils/sampleERC20.sol",
        "file": "contracts/utils/sampleERC20.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 1009,
        "sourceUnit": 560,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 566,
        "nodeType": "ImportDirective",
        "src": "199:38:3",
        "absolutePath": "contracts/utils/LibShare.sol",
        "file": "contracts/utils/LibShare.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 1009,
        "sourceUnit": 539,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 1008,
        "nodeType": "ContractDefinition",
        "src": "240:3908:3",
        "nodes": [
          {
            "id": 571,
            "nodeType": "VariableDeclaration",
            "src": "276:19:3",
            "constant": false,
            "mutability": "mutable",
            "name": "piNftContract",
            "nameLocation": "282:13:3",
            "scope": 1008,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_piNFT_$530",
              "typeString": "contract piNFT"
            },
            "typeName": {
              "id": 570,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 569,
                "name": "piNFT",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 530,
                "src": "276:5:3"
              },
              "referencedDeclaration": 530,
              "src": "276:5:3",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_piNFT_$530",
                "typeString": "contract piNFT"
              }
            },
            "visibility": "internal"
          },
          {
            "id": 574,
            "nodeType": "VariableDeclaration",
            "src": "301:25:3",
            "constant": false,
            "mutability": "mutable",
            "name": "erc20Contract",
            "nameLocation": "313:13:3",
            "scope": 1008,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_SampleERC20_$559",
              "typeString": "contract SampleERC20"
            },
            "typeName": {
              "id": 573,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 572,
                "name": "SampleERC20",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 559,
                "src": "301:11:3"
              },
              "referencedDeclaration": 559,
              "src": "301:11:3",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_SampleERC20_$559",
                "typeString": "contract SampleERC20"
              }
            },
            "visibility": "internal"
          },
          {
            "id": 583,
            "nodeType": "VariableDeclaration",
            "src": "337:48:3",
            "constant": false,
            "mutability": "mutable",
            "name": "alice",
            "nameLocation": "353:5:3",
            "scope": 1008,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address_payable",
              "typeString": "address payable"
            },
            "typeName": {
              "id": 575,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "337:15:3",
              "stateMutability": "payable",
              "typeDescriptions": {
                "typeIdentifier": "t_address_payable",
                "typeString": "address payable"
              }
            },
            "value": {
              "arguments": [
                {
                  "arguments": [
                    {
                      "hexValue": "307841424344",
                      "id": 580,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "377:6:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_43981_by_1",
                        "typeString": "int_const 43981"
                      },
                      "value": "0xABCD"
                    }
                  ],
                  "expression": {
                    "argumentTypes": [
                      {
                        "typeIdentifier": "t_rational_43981_by_1",
                        "typeString": "int_const 43981"
                      }
                    ],
                    "id": 579,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "nodeType": "ElementaryTypeNameExpression",
                    "src": "369:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_type$_t_address_$",
                      "typeString": "type(address)"
                    },
                    "typeName": {
                      "id": 578,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "369:7:3",
                      "typeDescriptions": {}
                    }
                  },
                  "id": 581,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "typeConversion",
                  "lValueRequested": false,
                  "names": [],
                  "nodeType": "FunctionCall",
                  "src": "369:15:3",
                  "tryCall": false,
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                ],
                "id": 577,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "lValueRequested": false,
                "nodeType": "ElementaryTypeNameExpression",
                "src": "361:8:3",
                "typeDescriptions": {
                  "typeIdentifier": "t_type$_t_address_payable_$",
                  "typeString": "type(address payable)"
                },
                "typeName": {
                  "id": 576,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "361:8:3",
                  "stateMutability": "payable",
                  "typeDescriptions": {}
                }
              },
              "id": 582,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "typeConversion",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "361:24:3",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_address_payable",
                "typeString": "address payable"
              }
            },
            "visibility": "internal"
          },
          {
            "id": 592,
            "nodeType": "VariableDeclaration",
            "src": "391:46:3",
            "constant": false,
            "mutability": "mutable",
            "name": "bob",
            "nameLocation": "407:3:3",
            "scope": 1008,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address_payable",
              "typeString": "address payable"
            },
            "typeName": {
              "id": 584,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "391:15:3",
              "stateMutability": "payable",
              "typeDescriptions": {
                "typeIdentifier": "t_address_payable",
                "typeString": "address payable"
              }
            },
            "value": {
              "arguments": [
                {
                  "arguments": [
                    {
                      "hexValue": "307841424343",
                      "id": 589,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "429:6:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_43980_by_1",
                        "typeString": "int_const 43980"
                      },
                      "value": "0xABCC"
                    }
                  ],
                  "expression": {
                    "argumentTypes": [
                      {
                        "typeIdentifier": "t_rational_43980_by_1",
                        "typeString": "int_const 43980"
                      }
                    ],
                    "id": 588,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "nodeType": "ElementaryTypeNameExpression",
                    "src": "421:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_type$_t_address_$",
                      "typeString": "type(address)"
                    },
                    "typeName": {
                      "id": 587,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "421:7:3",
                      "typeDescriptions": {}
                    }
                  },
                  "id": 590,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "typeConversion",
                  "lValueRequested": false,
                  "names": [],
                  "nodeType": "FunctionCall",
                  "src": "421:15:3",
                  "tryCall": false,
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                ],
                "id": 586,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "lValueRequested": false,
                "nodeType": "ElementaryTypeNameExpression",
                "src": "413:8:3",
                "typeDescriptions": {
                  "typeIdentifier": "t_type$_t_address_payable_$",
                  "typeString": "type(address payable)"
                },
                "typeName": {
                  "id": 585,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "413:8:3",
                  "stateMutability": "payable",
                  "typeDescriptions": {}
                }
              },
              "id": 591,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "typeConversion",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "413:24:3",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_address_payable",
                "typeString": "address payable"
              }
            },
            "visibility": "internal"
          },
          {
            "id": 601,
            "nodeType": "VariableDeclaration",
            "src": "443:58:3",
            "constant": false,
            "mutability": "mutable",
            "name": "royaltyReceiver",
            "nameLocation": "459:15:3",
            "scope": 1008,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address_payable",
              "typeString": "address payable"
            },
            "typeName": {
              "id": 593,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "443:15:3",
              "stateMutability": "payable",
              "typeDescriptions": {
                "typeIdentifier": "t_address_payable",
                "typeString": "address payable"
              }
            },
            "value": {
              "arguments": [
                {
                  "arguments": [
                    {
                      "hexValue": "307842454546",
                      "id": 598,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "493:6:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_48879_by_1",
                        "typeString": "int_const 48879"
                      },
                      "value": "0xBEEF"
                    }
                  ],
                  "expression": {
                    "argumentTypes": [
                      {
                        "typeIdentifier": "t_rational_48879_by_1",
                        "typeString": "int_const 48879"
                      }
                    ],
                    "id": 597,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "nodeType": "ElementaryTypeNameExpression",
                    "src": "485:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_type$_t_address_$",
                      "typeString": "type(address)"
                    },
                    "typeName": {
                      "id": 596,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "485:7:3",
                      "typeDescriptions": {}
                    }
                  },
                  "id": 599,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "typeConversion",
                  "lValueRequested": false,
                  "names": [],
                  "nodeType": "FunctionCall",
                  "src": "485:15:3",
                  "tryCall": false,
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                ],
                "id": 595,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "lValueRequested": false,
                "nodeType": "ElementaryTypeNameExpression",
                "src": "477:8:3",
                "typeDescriptions": {
                  "typeIdentifier": "t_type$_t_address_payable_$",
                  "typeString": "type(address payable)"
                },
                "typeName": {
                  "id": 594,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "477:8:3",
                  "stateMutability": "payable",
                  "typeDescriptions": {}
                }
              },
              "id": 600,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "typeConversion",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "477:24:3",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_address_payable",
                "typeString": "address payable"
              }
            },
            "visibility": "internal"
          },
          {
            "id": 610,
            "nodeType": "VariableDeclaration",
            "src": "507:52:3",
            "constant": false,
            "mutability": "mutable",
            "name": "validator",
            "nameLocation": "523:9:3",
            "scope": 1008,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address_payable",
              "typeString": "address payable"
            },
            "typeName": {
              "id": 602,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "507:15:3",
              "stateMutability": "payable",
              "typeDescriptions": {
                "typeIdentifier": "t_address_payable",
                "typeString": "address payable"
              }
            },
            "value": {
              "arguments": [
                {
                  "arguments": [
                    {
                      "hexValue": "307841424242",
                      "id": 607,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "551:6:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_43963_by_1",
                        "typeString": "int_const 43963"
                      },
                      "value": "0xABBB"
                    }
                  ],
                  "expression": {
                    "argumentTypes": [
                      {
                        "typeIdentifier": "t_rational_43963_by_1",
                        "typeString": "int_const 43963"
                      }
                    ],
                    "id": 606,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "nodeType": "ElementaryTypeNameExpression",
                    "src": "543:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_type$_t_address_$",
                      "typeString": "type(address)"
                    },
                    "typeName": {
                      "id": 605,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "543:7:3",
                      "typeDescriptions": {}
                    }
                  },
                  "id": 608,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "typeConversion",
                  "lValueRequested": false,
                  "names": [],
                  "nodeType": "FunctionCall",
                  "src": "543:15:3",
                  "tryCall": false,
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                ],
                "id": 604,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "lValueRequested": false,
                "nodeType": "ElementaryTypeNameExpression",
                "src": "535:8:3",
                "typeDescriptions": {
                  "typeIdentifier": "t_type$_t_address_payable_$",
                  "typeString": "type(address payable)"
                },
                "typeName": {
                  "id": 603,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "535:8:3",
                  "stateMutability": "payable",
                  "typeDescriptions": {}
                }
              },
              "id": 609,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "typeConversion",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "535:24:3",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_address_payable",
                "typeString": "address payable"
              }
            },
            "visibility": "internal"
          },
          {
            "id": 630,
            "nodeType": "FunctionDefinition",
            "src": "566:135:3",
            "body": {
              "id": 629,
              "nodeType": "Block",
              "src": "590:111:3",
              "statements": [
                {
                  "expression": {
                    "id": 620,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 613,
                      "name": "piNftContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 571,
                      "src": "600:13:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_piNFT_$530",
                        "typeString": "contract piNFT"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "hexValue": "41636f6e6f6d79",
                          "id": 617,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "626:9:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_6e951de763332019f7352a361539f431641204af6f8cc710371bcd7606e39444",
                            "typeString": "literal_string \"Aconomy\""
                          },
                          "value": "Aconomy"
                        },
                        {
                          "hexValue": "41434f",
                          "id": 618,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "637:5:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_068920217ff881239b2e62a8455a08354562b3ff5009dc815c19d2dd51ac9d4d",
                            "typeString": "literal_string \"ACO\""
                          },
                          "value": "ACO"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_stringliteral_6e951de763332019f7352a361539f431641204af6f8cc710371bcd7606e39444",
                            "typeString": "literal_string \"Aconomy\""
                          },
                          {
                            "typeIdentifier": "t_stringliteral_068920217ff881239b2e62a8455a08354562b3ff5009dc815c19d2dd51ac9d4d",
                            "typeString": "literal_string \"ACO\""
                          }
                        ],
                        "id": 616,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "NewExpression",
                        "src": "616:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_creation_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$_t_contract$_piNFT_$530_$",
                          "typeString": "function (string memory,string memory) returns (contract piNFT)"
                        },
                        "typeName": {
                          "id": 615,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 614,
                            "name": "piNFT",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 530,
                            "src": "620:5:3"
                          },
                          "referencedDeclaration": 530,
                          "src": "620:5:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_piNFT_$530",
                            "typeString": "contract piNFT"
                          }
                        }
                      },
                      "id": 619,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "616:27:3",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_piNFT_$530",
                        "typeString": "contract piNFT"
                      }
                    },
                    "src": "600:43:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_piNFT_$530",
                      "typeString": "contract piNFT"
                    }
                  },
                  "id": 621,
                  "nodeType": "ExpressionStatement",
                  "src": "600:43:3"
                },
                {
                  "expression": {
                    "id": 627,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 622,
                      "name": "erc20Contract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 574,
                      "src": "653:13:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_SampleERC20_$559",
                        "typeString": "contract SampleERC20"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 625,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "NewExpression",
                        "src": "669:15:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_creation_nonpayable$__$returns$_t_contract$_SampleERC20_$559_$",
                          "typeString": "function () returns (contract SampleERC20)"
                        },
                        "typeName": {
                          "id": 624,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 623,
                            "name": "SampleERC20",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 559,
                            "src": "673:11:3"
                          },
                          "referencedDeclaration": 559,
                          "src": "673:11:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_SampleERC20_$559",
                            "typeString": "contract SampleERC20"
                          }
                        }
                      },
                      "id": 626,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "669:17:3",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_SampleERC20_$559",
                        "typeString": "contract SampleERC20"
                      }
                    },
                    "src": "653:33:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_SampleERC20_$559",
                      "typeString": "contract SampleERC20"
                    }
                  },
                  "id": 628,
                  "nodeType": "ExpressionStatement",
                  "src": "653:33:3"
                }
              ]
            },
            "functionSelector": "0a9254e4",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setUp",
            "nameLocation": "575:5:3",
            "parameters": {
              "id": 611,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "580:2:3"
            },
            "returnParameters": {
              "id": 612,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "590:0:3"
            },
            "scope": 1008,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 648,
            "nodeType": "FunctionDefinition",
            "src": "709:373:3",
            "body": {
              "id": 647,
              "nodeType": "Block",
              "src": "748:334:3",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "expression": {
                            "id": 634,
                            "name": "piNftContract",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 571,
                            "src": "864:13:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_piNFT_$530",
                              "typeString": "contract piNFT"
                            }
                          },
                          "id": 635,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "name",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 23151,
                          "src": "864:18:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_view$__$returns$_t_string_memory_ptr_$",
                            "typeString": "function () view external returns (string memory)"
                          }
                        },
                        "id": 636,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "864:20:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      },
                      {
                        "hexValue": "41636f6e6f6d79",
                        "id": 637,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "886:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_6e951de763332019f7352a361539f431641204af6f8cc710371bcd7606e39444",
                          "typeString": "literal_string \"Aconomy\""
                        },
                        "value": "Aconomy"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_6e951de763332019f7352a361539f431641204af6f8cc710371bcd7606e39444",
                          "typeString": "literal_string \"Aconomy\""
                        }
                      ],
                      "id": 633,
                      "name": "assertEq",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        3674,
                        3699,
                        3712,
                        3728,
                        3770,
                        3812,
                        3854,
                        3891,
                        3928,
                        3965,
                        1329,
                        1354,
                        1384,
                        1409,
                        1468,
                        1493,
                        1523,
                        1548,
                        2648,
                        2683
                      ],
                      "referencedDeclaration": 2648,
                      "src": "855:8:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory,string memory)"
                      }
                    },
                    "id": 638,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "855:41:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 639,
                  "nodeType": "ExpressionStatement",
                  "src": "855:41:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "expression": {
                            "id": 641,
                            "name": "piNftContract",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 571,
                            "src": "915:13:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_piNFT_$530",
                              "typeString": "contract piNFT"
                            }
                          },
                          "id": 642,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "symbol",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 23161,
                          "src": "915:20:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_view$__$returns$_t_string_memory_ptr_$",
                            "typeString": "function () view external returns (string memory)"
                          }
                        },
                        "id": 643,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "915:22:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      },
                      {
                        "hexValue": "41434f",
                        "id": 644,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "939:5:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_068920217ff881239b2e62a8455a08354562b3ff5009dc815c19d2dd51ac9d4d",
                          "typeString": "literal_string \"ACO\""
                        },
                        "value": "ACO"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_068920217ff881239b2e62a8455a08354562b3ff5009dc815c19d2dd51ac9d4d",
                          "typeString": "literal_string \"ACO\""
                        }
                      ],
                      "id": 640,
                      "name": "assertEq",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        3674,
                        3699,
                        3712,
                        3728,
                        3770,
                        3812,
                        3854,
                        3891,
                        3928,
                        3965,
                        1329,
                        1354,
                        1384,
                        1409,
                        1468,
                        1493,
                        1523,
                        1548,
                        2648,
                        2683
                      ],
                      "referencedDeclaration": 2648,
                      "src": "906:8:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory,string memory)"
                      }
                    },
                    "id": 645,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "906:39:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 646,
                  "nodeType": "ExpressionStatement",
                  "src": "906:39:3"
                }
              ]
            },
            "functionSelector": "9b1fe7eb",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "test_name_and_symbol",
            "nameLocation": "718:20:3",
            "parameters": {
              "id": 631,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "738:2:3"
            },
            "returnParameters": {
              "id": 632,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "748:0:3"
            },
            "scope": 1008,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 725,
            "nodeType": "FunctionDefinition",
            "src": "1088:574:3",
            "body": {
              "id": 724,
              "nodeType": "Block",
              "src": "1140:522:3",
              "statements": [
                {
                  "assignments": [
                    656
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 656,
                      "mutability": "mutable",
                      "name": "royArray",
                      "nameLocation": "1180:8:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 724,
                      "src": "1156:32:3",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_struct$_Share_$537_memory_ptr_$dyn_memory_ptr",
                        "typeString": "struct LibShare.Share[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 654,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 653,
                            "name": "LibShare.Share",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 537,
                            "src": "1156:14:3"
                          },
                          "referencedDeclaration": 537,
                          "src": "1156:14:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Share_$537_storage_ptr",
                            "typeString": "struct LibShare.Share"
                          }
                        },
                        "id": 655,
                        "nodeType": "ArrayTypeName",
                        "src": "1156:16:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Share_$537_storage_$dyn_storage_ptr",
                          "typeString": "struct LibShare.Share[]"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 657,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1156:32:3"
                },
                {
                  "assignments": [
                    662
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 662,
                      "mutability": "mutable",
                      "name": "royalty",
                      "nameLocation": "1221:7:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 724,
                      "src": "1199:29:3",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Share_$537_memory_ptr",
                        "typeString": "struct LibShare.Share"
                      },
                      "typeName": {
                        "id": 661,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 660,
                          "name": "LibShare.Share",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 537,
                          "src": "1199:14:3"
                        },
                        "referencedDeclaration": 537,
                        "src": "1199:14:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Share_$537_storage_ptr",
                          "typeString": "struct LibShare.Share"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 663,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1199:29:3"
                },
                {
                  "expression": {
                    "id": 673,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 664,
                      "name": "royalty",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 662,
                      "src": "1238:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Share_$537_memory_ptr",
                        "typeString": "struct LibShare.Share memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 667,
                          "name": "royaltyReceiver",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 601,
                          "src": "1263:15:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        {
                          "arguments": [
                            {
                              "hexValue": "3130",
                              "id": 670,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1287:2:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_10_by_1",
                                "typeString": "int_const 10"
                              },
                              "value": "10"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_10_by_1",
                                "typeString": "int_const 10"
                              }
                            ],
                            "id": 669,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "1280:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_uint96_$",
                              "typeString": "type(uint96)"
                            },
                            "typeName": {
                              "id": 668,
                              "name": "uint96",
                              "nodeType": "ElementaryTypeName",
                              "src": "1280:6:3",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 671,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1280:10:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint96",
                            "typeString": "uint96"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          },
                          {
                            "typeIdentifier": "t_uint96",
                            "typeString": "uint96"
                          }
                        ],
                        "expression": {
                          "id": 665,
                          "name": "LibShare",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 538,
                          "src": "1248:8:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_LibShare_$538_$",
                            "typeString": "type(library LibShare)"
                          }
                        },
                        "id": 666,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "Share",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 537,
                        "src": "1248:14:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_struct$_Share_$537_storage_ptr_$",
                          "typeString": "type(struct LibShare.Share storage pointer)"
                        }
                      },
                      "id": 672,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "structConstructorCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1248:43:3",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Share_$537_memory_ptr",
                        "typeString": "struct LibShare.Share memory"
                      }
                    },
                    "src": "1238:53:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Share_$537_memory_ptr",
                      "typeString": "struct LibShare.Share memory"
                    }
                  },
                  "id": 674,
                  "nodeType": "ExpressionStatement",
                  "src": "1238:53:3"
                },
                {
                  "expression": {
                    "id": 682,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 675,
                      "name": "royArray",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 656,
                      "src": "1310:8:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_struct$_Share_$537_memory_ptr_$dyn_memory_ptr",
                        "typeString": "struct LibShare.Share memory[] memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "hexValue": "31",
                          "id": 680,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1341:1:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          },
                          "value": "1"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          }
                        ],
                        "id": 679,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "NewExpression",
                        "src": "1320:20:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_Share_$537_memory_ptr_$dyn_memory_ptr_$",
                          "typeString": "function (uint256) pure returns (struct LibShare.Share memory[] memory)"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 677,
                            "nodeType": "UserDefinedTypeName",
                            "pathNode": {
                              "id": 676,
                              "name": "LibShare.Share",
                              "nodeType": "IdentifierPath",
                              "referencedDeclaration": 537,
                              "src": "1324:14:3"
                            },
                            "referencedDeclaration": 537,
                            "src": "1324:14:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Share_$537_storage_ptr",
                              "typeString": "struct LibShare.Share"
                            }
                          },
                          "id": 678,
                          "nodeType": "ArrayTypeName",
                          "src": "1324:16:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_Share_$537_storage_$dyn_storage_ptr",
                            "typeString": "struct LibShare.Share[]"
                          }
                        }
                      },
                      "id": 681,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1320:23:3",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_struct$_Share_$537_memory_ptr_$dyn_memory_ptr",
                        "typeString": "struct LibShare.Share memory[] memory"
                      }
                    },
                    "src": "1310:33:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Share_$537_memory_ptr_$dyn_memory_ptr",
                      "typeString": "struct LibShare.Share memory[] memory"
                    }
                  },
                  "id": 683,
                  "nodeType": "ExpressionStatement",
                  "src": "1310:33:3"
                },
                {
                  "expression": {
                    "id": 688,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 684,
                        "name": "royArray",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 656,
                        "src": "1353:8:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Share_$537_memory_ptr_$dyn_memory_ptr",
                          "typeString": "struct LibShare.Share memory[] memory"
                        }
                      },
                      "id": 686,
                      "indexExpression": {
                        "hexValue": "30",
                        "id": 685,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1362:1:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "1353:11:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Share_$537_memory_ptr",
                        "typeString": "struct LibShare.Share memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 687,
                      "name": "royalty",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 662,
                      "src": "1367:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Share_$537_memory_ptr",
                        "typeString": "struct LibShare.Share memory"
                      }
                    },
                    "src": "1353:21:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Share_$537_memory_ptr",
                      "typeString": "struct LibShare.Share memory"
                    }
                  },
                  "id": 689,
                  "nodeType": "ExpressionStatement",
                  "src": "1353:21:3"
                },
                {
                  "assignments": [
                    691
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 691,
                      "mutability": "mutable",
                      "name": "uri",
                      "nameLocation": "1398:3:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 724,
                      "src": "1384:17:3",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 690,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "1384:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 693,
                  "initialValue": {
                    "hexValue": "7777772e736b2e636f6d",
                    "id": 692,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1404:12:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_1c648150e31364cd04993cd2cf1ec140a14f53d93cf48130beb6628218eaf27e",
                      "typeString": "literal_string \"www.sk.com\""
                    },
                    "value": "www.sk.com"
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1384:32:3"
                },
                {
                  "assignments": [
                    695
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 695,
                      "mutability": "mutable",
                      "name": "tokenId",
                      "nameLocation": "1444:7:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 724,
                      "src": "1436:15:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 694,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1436:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 702,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 698,
                        "name": "alice",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 583,
                        "src": "1476:5:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "id": 699,
                        "name": "uri",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 691,
                        "src": "1483:3:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      },
                      {
                        "id": 700,
                        "name": "royArray",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 656,
                        "src": "1488:8:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Share_$537_memory_ptr_$dyn_memory_ptr",
                          "typeString": "struct LibShare.Share memory[] memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        },
                        {
                          "typeIdentifier": "t_array$_t_struct$_Share_$537_memory_ptr_$dyn_memory_ptr",
                          "typeString": "struct LibShare.Share memory[] memory"
                        }
                      ],
                      "expression": {
                        "id": 696,
                        "name": "piNftContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 571,
                        "src": "1454:13:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_piNFT_$530",
                          "typeString": "contract piNFT"
                        }
                      },
                      "id": 697,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "mintNFT",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 119,
                      "src": "1454:21:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_string_memory_ptr_$_t_array$_t_struct$_Share_$537_memory_ptr_$dyn_memory_ptr_$returns$_t_uint256_$",
                        "typeString": "function (address,string memory,struct LibShare.Share memory[] memory) external returns (uint256)"
                      }
                    },
                    "id": 701,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1454:43:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1436:61:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 706,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 695,
                        "src": "1519:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 703,
                        "name": "console",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14241,
                        "src": "1507:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_console_$14241_$",
                          "typeString": "type(library console)"
                        }
                      },
                      "id": 705,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "log",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 6758,
                      "src": "1507:11:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$__$",
                        "typeString": "function (uint256) view"
                      }
                    },
                    "id": 707,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1507:20:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 708,
                  "nodeType": "ExpressionStatement",
                  "src": "1507:20:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 710,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 695,
                        "src": "1546:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "hexValue": "30",
                        "id": 711,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1555:1:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      {
                        "hexValue": "4661696c6564206d696e74696e67205269676874204e4654",
                        "id": 712,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1557:26:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_aa38311db8bbbeffc079d15e742bff1d80a77e31fe7426e38710da88c825b1ba",
                          "typeString": "literal_string \"Failed minting Right NFT\""
                        },
                        "value": "Failed minting Right NFT"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_aa38311db8bbbeffc079d15e742bff1d80a77e31fe7426e38710da88c825b1ba",
                          "typeString": "literal_string \"Failed minting Right NFT\""
                        }
                      ],
                      "id": 709,
                      "name": "assertEq",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        3674,
                        3699,
                        3712,
                        3728,
                        3770,
                        3812,
                        3854,
                        3891,
                        3928,
                        3965,
                        1329,
                        1354,
                        1384,
                        1409,
                        1468,
                        1493,
                        1523,
                        1548,
                        2648,
                        2683
                      ],
                      "referencedDeclaration": 1548,
                      "src": "1537:8:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (uint256,uint256,string memory)"
                      }
                    },
                    "id": 713,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1537:47:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 714,
                  "nodeType": "ExpressionStatement",
                  "src": "1537:47:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 718,
                            "name": "alice",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 583,
                            "src": "1627:5:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          ],
                          "expression": {
                            "id": 716,
                            "name": "piNftContract",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 571,
                            "src": "1603:13:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_piNFT_$530",
                              "typeString": "contract piNFT"
                            }
                          },
                          "id": 717,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "balanceOf",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 23113,
                          "src": "1603:23:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                            "typeString": "function (address) view external returns (uint256)"
                          }
                        },
                        "id": 719,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1603:30:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "hexValue": "31",
                        "id": 720,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1635:1:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      },
                      {
                        "hexValue": "4661696c656420746f206d696e74",
                        "id": 721,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1638:16:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c95e4d88e7977ee2e85a69314c101d644273baf422fb1ded43e7c365f51dc9f2",
                          "typeString": "literal_string \"Failed to mint\""
                        },
                        "value": "Failed to mint"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_c95e4d88e7977ee2e85a69314c101d644273baf422fb1ded43e7c365f51dc9f2",
                          "typeString": "literal_string \"Failed to mint\""
                        }
                      ],
                      "id": 715,
                      "name": "assertEq",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        3674,
                        3699,
                        3712,
                        3728,
                        3770,
                        3812,
                        3854,
                        3891,
                        3928,
                        3965,
                        1329,
                        1354,
                        1384,
                        1409,
                        1468,
                        1493,
                        1523,
                        1548,
                        2648,
                        2683
                      ],
                      "referencedDeclaration": 1548,
                      "src": "1594:8:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (uint256,uint256,string memory)"
                      }
                    },
                    "id": 722,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1594:61:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 723,
                  "nodeType": "ExpressionStatement",
                  "src": "1594:61:3"
                }
              ]
            },
            "functionSelector": "3d6580e1",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "test_mint_an_erc721_token_to_alice",
            "nameLocation": "1097:34:3",
            "parameters": {
              "id": 649,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1131:2:3"
            },
            "returnParameters": {
              "id": 650,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1140:0:3"
            },
            "scope": 1008,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 832,
            "nodeType": "FunctionDefinition",
            "src": "1668:774:3",
            "body": {
              "id": 831,
              "nodeType": "Block",
              "src": "1721:721:3",
              "statements": [
                {
                  "assignments": [
                    733
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 733,
                      "mutability": "mutable",
                      "name": "royArray",
                      "nameLocation": "1755:8:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 831,
                      "src": "1731:32:3",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_struct$_Share_$537_memory_ptr_$dyn_memory_ptr",
                        "typeString": "struct LibShare.Share[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 731,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 730,
                            "name": "LibShare.Share",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 537,
                            "src": "1731:14:3"
                          },
                          "referencedDeclaration": 537,
                          "src": "1731:14:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Share_$537_storage_ptr",
                            "typeString": "struct LibShare.Share"
                          }
                        },
                        "id": 732,
                        "nodeType": "ArrayTypeName",
                        "src": "1731:16:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Share_$537_storage_$dyn_storage_ptr",
                          "typeString": "struct LibShare.Share[]"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 734,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1731:32:3"
                },
                {
                  "assignments": [
                    739
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 739,
                      "mutability": "mutable",
                      "name": "royalty",
                      "nameLocation": "1796:7:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 831,
                      "src": "1774:29:3",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Share_$537_memory_ptr",
                        "typeString": "struct LibShare.Share"
                      },
                      "typeName": {
                        "id": 738,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 737,
                          "name": "LibShare.Share",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 537,
                          "src": "1774:14:3"
                        },
                        "referencedDeclaration": 537,
                        "src": "1774:14:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Share_$537_storage_ptr",
                          "typeString": "struct LibShare.Share"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 740,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1774:29:3"
                },
                {
                  "expression": {
                    "id": 750,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 741,
                      "name": "royalty",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 739,
                      "src": "1813:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Share_$537_memory_ptr",
                        "typeString": "struct LibShare.Share memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 744,
                          "name": "royaltyReceiver",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 601,
                          "src": "1838:15:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        {
                          "arguments": [
                            {
                              "hexValue": "3130",
                              "id": 747,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1862:2:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_10_by_1",
                                "typeString": "int_const 10"
                              },
                              "value": "10"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_10_by_1",
                                "typeString": "int_const 10"
                              }
                            ],
                            "id": 746,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "1855:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_uint96_$",
                              "typeString": "type(uint96)"
                            },
                            "typeName": {
                              "id": 745,
                              "name": "uint96",
                              "nodeType": "ElementaryTypeName",
                              "src": "1855:6:3",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 748,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1855:10:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint96",
                            "typeString": "uint96"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          },
                          {
                            "typeIdentifier": "t_uint96",
                            "typeString": "uint96"
                          }
                        ],
                        "expression": {
                          "id": 742,
                          "name": "LibShare",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 538,
                          "src": "1823:8:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_LibShare_$538_$",
                            "typeString": "type(library LibShare)"
                          }
                        },
                        "id": 743,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "Share",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 537,
                        "src": "1823:14:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_struct$_Share_$537_storage_ptr_$",
                          "typeString": "type(struct LibShare.Share storage pointer)"
                        }
                      },
                      "id": 749,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "structConstructorCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1823:43:3",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Share_$537_memory_ptr",
                        "typeString": "struct LibShare.Share memory"
                      }
                    },
                    "src": "1813:53:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Share_$537_memory_ptr",
                      "typeString": "struct LibShare.Share memory"
                    }
                  },
                  "id": 751,
                  "nodeType": "ExpressionStatement",
                  "src": "1813:53:3"
                },
                {
                  "expression": {
                    "id": 759,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 752,
                      "name": "royArray",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 733,
                      "src": "1885:8:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_struct$_Share_$537_memory_ptr_$dyn_memory_ptr",
                        "typeString": "struct LibShare.Share memory[] memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "hexValue": "31",
                          "id": 757,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1916:1:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          },
                          "value": "1"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          }
                        ],
                        "id": 756,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "NewExpression",
                        "src": "1895:20:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_Share_$537_memory_ptr_$dyn_memory_ptr_$",
                          "typeString": "function (uint256) pure returns (struct LibShare.Share memory[] memory)"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 754,
                            "nodeType": "UserDefinedTypeName",
                            "pathNode": {
                              "id": 753,
                              "name": "LibShare.Share",
                              "nodeType": "IdentifierPath",
                              "referencedDeclaration": 537,
                              "src": "1899:14:3"
                            },
                            "referencedDeclaration": 537,
                            "src": "1899:14:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Share_$537_storage_ptr",
                              "typeString": "struct LibShare.Share"
                            }
                          },
                          "id": 755,
                          "nodeType": "ArrayTypeName",
                          "src": "1899:16:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_Share_$537_storage_$dyn_storage_ptr",
                            "typeString": "struct LibShare.Share[]"
                          }
                        }
                      },
                      "id": 758,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1895:23:3",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_struct$_Share_$537_memory_ptr_$dyn_memory_ptr",
                        "typeString": "struct LibShare.Share memory[] memory"
                      }
                    },
                    "src": "1885:33:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Share_$537_memory_ptr_$dyn_memory_ptr",
                      "typeString": "struct LibShare.Share memory[] memory"
                    }
                  },
                  "id": 760,
                  "nodeType": "ExpressionStatement",
                  "src": "1885:33:3"
                },
                {
                  "expression": {
                    "id": 765,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 761,
                        "name": "royArray",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 733,
                        "src": "1928:8:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Share_$537_memory_ptr_$dyn_memory_ptr",
                          "typeString": "struct LibShare.Share memory[] memory"
                        }
                      },
                      "id": 763,
                      "indexExpression": {
                        "hexValue": "30",
                        "id": 762,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1937:1:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "1928:11:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Share_$537_memory_ptr",
                        "typeString": "struct LibShare.Share memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 764,
                      "name": "royalty",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 739,
                      "src": "1942:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Share_$537_memory_ptr",
                        "typeString": "struct LibShare.Share memory"
                      }
                    },
                    "src": "1928:21:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Share_$537_memory_ptr",
                      "typeString": "struct LibShare.Share memory"
                    }
                  },
                  "id": 766,
                  "nodeType": "ExpressionStatement",
                  "src": "1928:21:3"
                },
                {
                  "assignments": [
                    768
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 768,
                      "mutability": "mutable",
                      "name": "uri",
                      "nameLocation": "1973:3:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 831,
                      "src": "1959:17:3",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 767,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "1959:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 770,
                  "initialValue": {
                    "hexValue": "7777772e736b2e636f6d",
                    "id": 769,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1979:12:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_1c648150e31364cd04993cd2cf1ec140a14f53d93cf48130beb6628218eaf27e",
                      "typeString": "literal_string \"www.sk.com\""
                    },
                    "value": "www.sk.com"
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1959:32:3"
                },
                {
                  "assignments": [
                    772
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 772,
                      "mutability": "mutable",
                      "name": "tokenId",
                      "nameLocation": "2009:7:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 831,
                      "src": "2001:15:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 771,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2001:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 779,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 775,
                        "name": "alice",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 583,
                        "src": "2041:5:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "id": 776,
                        "name": "uri",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 768,
                        "src": "2048:3:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      },
                      {
                        "id": 777,
                        "name": "royArray",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 733,
                        "src": "2053:8:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Share_$537_memory_ptr_$dyn_memory_ptr",
                          "typeString": "struct LibShare.Share memory[] memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        },
                        {
                          "typeIdentifier": "t_array$_t_struct$_Share_$537_memory_ptr_$dyn_memory_ptr",
                          "typeString": "struct LibShare.Share memory[] memory"
                        }
                      ],
                      "expression": {
                        "id": 773,
                        "name": "piNftContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 571,
                        "src": "2019:13:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_piNFT_$530",
                          "typeString": "contract piNFT"
                        }
                      },
                      "id": 774,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "mintNFT",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 119,
                      "src": "2019:21:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_string_memory_ptr_$_t_array$_t_struct$_Share_$537_memory_ptr_$dyn_memory_ptr_$returns$_t_uint256_$",
                        "typeString": "function (address,string memory,struct LibShare.Share memory[] memory) external returns (uint256)"
                      }
                    },
                    "id": 778,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2019:43:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2001:61:3"
                },
                {
                  "assignments": [
                    781
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 781,
                      "mutability": "mutable",
                      "name": "_uri",
                      "nameLocation": "2086:4:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 831,
                      "src": "2072:18:3",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 780,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "2072:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 786,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 784,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 772,
                        "src": "2116:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 782,
                        "name": "piNftContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 571,
                        "src": "2093:13:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_piNFT_$530",
                          "typeString": "contract piNFT"
                        }
                      },
                      "id": 783,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "tokenURI",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 24062,
                      "src": "2093:22:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_string_memory_ptr_$",
                        "typeString": "function (uint256) view external returns (string memory)"
                      }
                    },
                    "id": 785,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2093:31:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2072:52:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 788,
                        "name": "_uri",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 781,
                        "src": "2143:4:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      },
                      {
                        "hexValue": "7777772e736b2e636f6d",
                        "id": 789,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2149:12:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_1c648150e31364cd04993cd2cf1ec140a14f53d93cf48130beb6628218eaf27e",
                          "typeString": "literal_string \"www.sk.com\""
                        },
                        "value": "www.sk.com"
                      },
                      {
                        "hexValue": "496e76616c69642055524920666f722074686520746f6b656e",
                        "id": 790,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2163:27:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_531c8543b3ecfe97145ddff79cc50d7d210ecdfdf54ef59f3305b69b0d306e49",
                          "typeString": "literal_string \"Invalid URI for the token\""
                        },
                        "value": "Invalid URI for the token"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_1c648150e31364cd04993cd2cf1ec140a14f53d93cf48130beb6628218eaf27e",
                          "typeString": "literal_string \"www.sk.com\""
                        },
                        {
                          "typeIdentifier": "t_stringliteral_531c8543b3ecfe97145ddff79cc50d7d210ecdfdf54ef59f3305b69b0d306e49",
                          "typeString": "literal_string \"Invalid URI for the token\""
                        }
                      ],
                      "id": 787,
                      "name": "assertEq",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        3674,
                        3699,
                        3712,
                        3728,
                        3770,
                        3812,
                        3854,
                        3891,
                        3928,
                        3965,
                        1329,
                        1354,
                        1384,
                        1409,
                        1468,
                        1493,
                        1523,
                        1548,
                        2648,
                        2683
                      ],
                      "referencedDeclaration": 2683,
                      "src": "2134:8:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory,string memory,string memory)"
                      }
                    },
                    "id": 791,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2134:57:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 792,
                  "nodeType": "ExpressionStatement",
                  "src": "2134:57:3"
                },
                {
                  "assignments": [
                    798
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 798,
                      "mutability": "mutable",
                      "name": "temp",
                      "nameLocation": "2226:4:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 831,
                      "src": "2202:28:3",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_struct$_Share_$537_memory_ptr_$dyn_memory_ptr",
                        "typeString": "struct LibShare.Share[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 796,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 795,
                            "name": "LibShare.Share",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 537,
                            "src": "2202:14:3"
                          },
                          "referencedDeclaration": 537,
                          "src": "2202:14:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Share_$537_storage_ptr",
                            "typeString": "struct LibShare.Share"
                          }
                        },
                        "id": 797,
                        "nodeType": "ArrayTypeName",
                        "src": "2202:16:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Share_$537_storage_$dyn_storage_ptr",
                          "typeString": "struct LibShare.Share[]"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 803,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 801,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 772,
                        "src": "2260:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 799,
                        "name": "piNftContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 571,
                        "src": "2233:13:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_piNFT_$530",
                          "typeString": "contract piNFT"
                        }
                      },
                      "id": 800,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "getRoyalties",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 224,
                      "src": "2233:26:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_array$_t_struct$_Share_$537_memory_ptr_$dyn_memory_ptr_$",
                        "typeString": "function (uint256) view external returns (struct LibShare.Share memory[] memory)"
                      }
                    },
                    "id": 802,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2233:35:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Share_$537_memory_ptr_$dyn_memory_ptr",
                      "typeString": "struct LibShare.Share memory[] memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2202:66:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "baseExpression": {
                            "id": 807,
                            "name": "temp",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 798,
                            "src": "2290:4:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_Share_$537_memory_ptr_$dyn_memory_ptr",
                              "typeString": "struct LibShare.Share memory[] memory"
                            }
                          },
                          "id": 809,
                          "indexExpression": {
                            "hexValue": "30",
                            "id": 808,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2295:1:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "2290:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Share_$537_memory_ptr",
                            "typeString": "struct LibShare.Share memory"
                          }
                        },
                        "id": 810,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "account",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 534,
                        "src": "2290:15:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "expression": {
                        "id": 804,
                        "name": "console",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14241,
                        "src": "2278:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_console_$14241_$",
                          "typeString": "type(library console)"
                        }
                      },
                      "id": 806,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "log",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 6800,
                      "src": "2278:11:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$returns$__$",
                        "typeString": "function (address) view"
                      }
                    },
                    "id": 811,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2278:28:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 812,
                  "nodeType": "ExpressionStatement",
                  "src": "2278:28:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "baseExpression": {
                            "id": 814,
                            "name": "temp",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 798,
                            "src": "2325:4:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_Share_$537_memory_ptr_$dyn_memory_ptr",
                              "typeString": "struct LibShare.Share memory[] memory"
                            }
                          },
                          "id": 816,
                          "indexExpression": {
                            "hexValue": "30",
                            "id": 815,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2330:1:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "2325:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Share_$537_memory_ptr",
                            "typeString": "struct LibShare.Share memory"
                          }
                        },
                        "id": 817,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "account",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 534,
                        "src": "2325:15:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "id": 818,
                        "name": "royaltyReceiver",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 601,
                        "src": "2342:15:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "hexValue": "57726f6e6720526f79616c6974696573",
                        "id": 819,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2359:18:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_f13b20608b6c19c0658ee1e5b86cd30f2c5d523ca2aad300ee1902646e1fcca0",
                          "typeString": "literal_string \"Wrong Royalities\""
                        },
                        "value": "Wrong Royalities"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_f13b20608b6c19c0658ee1e5b86cd30f2c5d523ca2aad300ee1902646e1fcca0",
                          "typeString": "literal_string \"Wrong Royalities\""
                        }
                      ],
                      "id": 813,
                      "name": "assertEq",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        3674,
                        3699,
                        3712,
                        3728,
                        3770,
                        3812,
                        3854,
                        3891,
                        3928,
                        3965,
                        1329,
                        1354,
                        1384,
                        1409,
                        1468,
                        1493,
                        1523,
                        1548,
                        2648,
                        2683
                      ],
                      "referencedDeclaration": 1354,
                      "src": "2316:8:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (address,address,string memory)"
                      }
                    },
                    "id": 820,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2316:62:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 821,
                  "nodeType": "ExpressionStatement",
                  "src": "2316:62:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "baseExpression": {
                            "id": 823,
                            "name": "temp",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 798,
                            "src": "2397:4:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_Share_$537_memory_ptr_$dyn_memory_ptr",
                              "typeString": "struct LibShare.Share memory[] memory"
                            }
                          },
                          "id": 825,
                          "indexExpression": {
                            "hexValue": "30",
                            "id": 824,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2402:1:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "2397:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Share_$537_memory_ptr",
                            "typeString": "struct LibShare.Share memory"
                          }
                        },
                        "id": 826,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "value",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 536,
                        "src": "2397:13:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint96",
                          "typeString": "uint96"
                        }
                      },
                      {
                        "hexValue": "3130",
                        "id": 827,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2412:2:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_10_by_1",
                          "typeString": "int_const 10"
                        },
                        "value": "10"
                      },
                      {
                        "hexValue": "57726f6e6720526f79616c6974696573",
                        "id": 828,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2416:18:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_f13b20608b6c19c0658ee1e5b86cd30f2c5d523ca2aad300ee1902646e1fcca0",
                          "typeString": "literal_string \"Wrong Royalities\""
                        },
                        "value": "Wrong Royalities"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint96",
                          "typeString": "uint96"
                        },
                        {
                          "typeIdentifier": "t_rational_10_by_1",
                          "typeString": "int_const 10"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_f13b20608b6c19c0658ee1e5b86cd30f2c5d523ca2aad300ee1902646e1fcca0",
                          "typeString": "literal_string \"Wrong Royalities\""
                        }
                      ],
                      "id": 822,
                      "name": "assertEq",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        3674,
                        3699,
                        3712,
                        3728,
                        3770,
                        3812,
                        3854,
                        3891,
                        3928,
                        3965,
                        1329,
                        1354,
                        1384,
                        1409,
                        1468,
                        1493,
                        1523,
                        1548,
                        2648,
                        2683
                      ],
                      "referencedDeclaration": 1548,
                      "src": "2388:8:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (uint256,uint256,string memory)"
                      }
                    },
                    "id": 829,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2388:47:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 830,
                  "nodeType": "ExpressionStatement",
                  "src": "2388:47:3"
                }
              ]
            },
            "functionSelector": "cd4a7a3c",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "test_fetch_token_uri_and_royalties",
            "nameLocation": "1677:34:3",
            "parameters": {
              "id": 726,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1711:2:3"
            },
            "returnParameters": {
              "id": 727,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1721:0:3"
            },
            "scope": 1008,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 856,
            "nodeType": "FunctionDefinition",
            "src": "2448:223:3",
            "body": {
              "id": 855,
              "nodeType": "Block",
              "src": "2501:170:3",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 838,
                        "name": "validator",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 610,
                        "src": "2530:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "hexValue": "31303030",
                        "id": 839,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2541:4:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1000_by_1",
                          "typeString": "int_const 1000"
                        },
                        "value": "1000"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_rational_1000_by_1",
                          "typeString": "int_const 1000"
                        }
                      ],
                      "expression": {
                        "id": 835,
                        "name": "erc20Contract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 574,
                        "src": "2511:13:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_SampleERC20_$559",
                          "typeString": "contract SampleERC20"
                        }
                      },
                      "id": 837,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "mint",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 558,
                      "src": "2511:18:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256) external"
                      }
                    },
                    "id": 840,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2511:35:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 841,
                  "nodeType": "ExpressionStatement",
                  "src": "2511:35:3"
                },
                {
                  "assignments": [
                    843
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 843,
                      "mutability": "mutable",
                      "name": "bal",
                      "nameLocation": "2564:3:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 855,
                      "src": "2556:11:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 842,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2556:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 848,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 846,
                        "name": "validator",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 610,
                        "src": "2594:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "expression": {
                        "id": 844,
                        "name": "erc20Contract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 574,
                        "src": "2570:13:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_SampleERC20_$559",
                          "typeString": "contract SampleERC20"
                        }
                      },
                      "id": 845,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "balanceOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 22404,
                      "src": "2570:23:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 847,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2570:34:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2556:48:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 850,
                        "name": "bal",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 843,
                        "src": "2623:3:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "hexValue": "31303030",
                        "id": 851,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2628:4:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1000_by_1",
                          "typeString": "int_const 1000"
                        },
                        "value": "1000"
                      },
                      {
                        "hexValue": "4661696c656420746f206d696e7420455243323020746f6b656e73",
                        "id": 852,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2634:29:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_9358ea38b31f08ead6060e6bad4a8684579ccc9420ff0496635f67d03fba4c15",
                          "typeString": "literal_string \"Failed to mint ERC20 tokens\""
                        },
                        "value": "Failed to mint ERC20 tokens"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_rational_1000_by_1",
                          "typeString": "int_const 1000"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_9358ea38b31f08ead6060e6bad4a8684579ccc9420ff0496635f67d03fba4c15",
                          "typeString": "literal_string \"Failed to mint ERC20 tokens\""
                        }
                      ],
                      "id": 849,
                      "name": "assertEq",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        3674,
                        3699,
                        3712,
                        3728,
                        3770,
                        3812,
                        3854,
                        3891,
                        3928,
                        3965,
                        1329,
                        1354,
                        1384,
                        1409,
                        1468,
                        1493,
                        1523,
                        1548,
                        2648,
                        2683
                      ],
                      "referencedDeclaration": 1548,
                      "src": "2614:8:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (uint256,uint256,string memory)"
                      }
                    },
                    "id": 853,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2614:50:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 854,
                  "nodeType": "ExpressionStatement",
                  "src": "2614:50:3"
                }
              ]
            },
            "functionSelector": "69b3ddac",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "test_mint_ERC20_tokens_to_validator",
            "nameLocation": "2457:35:3",
            "parameters": {
              "id": 833,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2492:2:3"
            },
            "returnParameters": {
              "id": 834,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2501:0:3"
            },
            "scope": 1008,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 930,
            "nodeType": "FunctionDefinition",
            "src": "2677:649:3",
            "body": {
              "id": 929,
              "nodeType": "Block",
              "src": "2739:587:3",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 859,
                      "name": "test_mint_an_erc721_token_to_alice",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 725,
                      "src": "2749:34:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 860,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2749:36:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 861,
                  "nodeType": "ExpressionStatement",
                  "src": "2749:36:3"
                },
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 862,
                      "name": "test_mint_ERC20_tokens_to_validator",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 856,
                      "src": "2795:35:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 863,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2795:37:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 864,
                  "nodeType": "ExpressionStatement",
                  "src": "2795:37:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 868,
                        "name": "validator",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 610,
                        "src": "2852:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "expression": {
                        "id": 865,
                        "name": "vm",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2826,
                        "src": "2843:2:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Vm_$6177",
                          "typeString": "contract Vm"
                        }
                      },
                      "id": 867,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "prank",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 5917,
                      "src": "2843:8:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address) external"
                      }
                    },
                    "id": 869,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2843:19:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 870,
                  "nodeType": "ExpressionStatement",
                  "src": "2843:19:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 876,
                            "name": "piNftContract",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 571,
                            "src": "2902:13:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_piNFT_$530",
                              "typeString": "contract piNFT"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_piNFT_$530",
                              "typeString": "contract piNFT"
                            }
                          ],
                          "id": 875,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "2894:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 874,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "2894:7:3",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 877,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2894:22:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "hexValue": "31303030",
                        "id": 878,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2918:4:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1000_by_1",
                          "typeString": "int_const 1000"
                        },
                        "value": "1000"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_rational_1000_by_1",
                          "typeString": "int_const 1000"
                        }
                      ],
                      "expression": {
                        "id": 871,
                        "name": "erc20Contract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 574,
                        "src": "2872:13:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_SampleERC20_$559",
                          "typeString": "contract SampleERC20"
                        }
                      },
                      "id": 873,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "approve",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 22472,
                      "src": "2872:21:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (address,uint256) external returns (bool)"
                      }
                    },
                    "id": 879,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2872:51:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 880,
                  "nodeType": "ExpressionStatement",
                  "src": "2872:51:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 884,
                        "name": "validator",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 610,
                        "src": "2942:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "expression": {
                        "id": 881,
                        "name": "vm",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2826,
                        "src": "2933:2:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Vm_$6177",
                          "typeString": "contract Vm"
                        }
                      },
                      "id": 883,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "prank",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 5917,
                      "src": "2933:8:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address) external"
                      }
                    },
                    "id": 885,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2933:19:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 886,
                  "nodeType": "ExpressionStatement",
                  "src": "2933:19:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 890,
                        "name": "validator",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 610,
                        "src": "2985:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "hexValue": "30",
                        "id": 891,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2996:1:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      {
                        "arguments": [
                          {
                            "id": 894,
                            "name": "erc20Contract",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 574,
                            "src": "3007:13:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_SampleERC20_$559",
                              "typeString": "contract SampleERC20"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_SampleERC20_$559",
                              "typeString": "contract SampleERC20"
                            }
                          ],
                          "id": 893,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "2999:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 892,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "2999:7:3",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 895,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2999:22:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "hexValue": "353030",
                        "id": 896,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3023:3:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_500_by_1",
                          "typeString": "int_const 500"
                        },
                        "value": "500"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_rational_500_by_1",
                          "typeString": "int_const 500"
                        }
                      ],
                      "expression": {
                        "id": 887,
                        "name": "piNftContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 571,
                        "src": "2962:13:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_piNFT_$530",
                          "typeString": "contract piNFT"
                        }
                      },
                      "id": 889,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "addERC20",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 266,
                      "src": "2962:22:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256,address,uint256) external"
                      }
                    },
                    "id": 897,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2962:65:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 898,
                  "nodeType": "ExpressionStatement",
                  "src": "2962:65:3"
                },
                {
                  "assignments": [
                    900
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 900,
                      "mutability": "mutable",
                      "name": "tokenBal",
                      "nameLocation": "3045:8:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 929,
                      "src": "3037:16:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 899,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3037:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 909,
                  "initialValue": {
                    "arguments": [
                      {
                        "hexValue": "30",
                        "id": 903,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3083:1:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      {
                        "arguments": [
                          {
                            "id": 906,
                            "name": "erc20Contract",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 574,
                            "src": "3094:13:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_SampleERC20_$559",
                              "typeString": "contract SampleERC20"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_SampleERC20_$559",
                              "typeString": "contract SampleERC20"
                            }
                          ],
                          "id": 905,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "3086:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 904,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "3086:7:3",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 907,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3086:22:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 901,
                        "name": "piNftContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 571,
                        "src": "3057:13:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_piNFT_$530",
                          "typeString": "contract piNFT"
                        }
                      },
                      "id": 902,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "viewBalance",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 529,
                      "src": "3057:25:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_uint256_$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (uint256,address) view external returns (uint256)"
                      }
                    },
                    "id": 908,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3057:52:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3037:72:3"
                },
                {
                  "assignments": [
                    911
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 911,
                      "mutability": "mutable",
                      "name": "validatorBal",
                      "nameLocation": "3127:12:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 929,
                      "src": "3119:20:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 910,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3119:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 916,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 914,
                        "name": "validator",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 610,
                        "src": "3166:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "expression": {
                        "id": 912,
                        "name": "erc20Contract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 574,
                        "src": "3142:13:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_SampleERC20_$559",
                          "typeString": "contract SampleERC20"
                        }
                      },
                      "id": 913,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "balanceOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 22404,
                      "src": "3142:23:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 915,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3142:34:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3119:57:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 918,
                        "name": "tokenBal",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 900,
                        "src": "3195:8:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "hexValue": "353030",
                        "id": 919,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3205:3:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_500_by_1",
                          "typeString": "int_const 500"
                        },
                        "value": "500"
                      },
                      {
                        "hexValue": "4661696c656420746f2061646420455243323020746f6b656e7320696e746f204e4654",
                        "id": 920,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3210:37:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_bdebbff18cef3b2214873d5e06fdc7f20b86de5f7e694da9d031284fb90bd7a5",
                          "typeString": "literal_string \"Failed to add ERC20 tokens into NFT\""
                        },
                        "value": "Failed to add ERC20 tokens into NFT"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_rational_500_by_1",
                          "typeString": "int_const 500"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_bdebbff18cef3b2214873d5e06fdc7f20b86de5f7e694da9d031284fb90bd7a5",
                          "typeString": "literal_string \"Failed to add ERC20 tokens into NFT\""
                        }
                      ],
                      "id": 917,
                      "name": "assertEq",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        3674,
                        3699,
                        3712,
                        3728,
                        3770,
                        3812,
                        3854,
                        3891,
                        3928,
                        3965,
                        1329,
                        1354,
                        1384,
                        1409,
                        1468,
                        1493,
                        1523,
                        1548,
                        2648,
                        2683
                      ],
                      "referencedDeclaration": 1548,
                      "src": "3186:8:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (uint256,uint256,string memory)"
                      }
                    },
                    "id": 921,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3186:62:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 922,
                  "nodeType": "ExpressionStatement",
                  "src": "3186:62:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 924,
                        "name": "validatorBal",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 911,
                        "src": "3267:12:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "hexValue": "353030",
                        "id": 925,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3281:3:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_500_by_1",
                          "typeString": "int_const 500"
                        },
                        "value": "500"
                      },
                      {
                        "hexValue": "56616c696461746f72732062616c616e6365206e6f742072656475636564",
                        "id": 926,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3286:32:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_38fe496e4dca0ccdfe0c1ef3a9774fcf2957c4aa2bb3b7d9bf66a97a737fb38a",
                          "typeString": "literal_string \"Validators balance not reduced\""
                        },
                        "value": "Validators balance not reduced"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_rational_500_by_1",
                          "typeString": "int_const 500"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_38fe496e4dca0ccdfe0c1ef3a9774fcf2957c4aa2bb3b7d9bf66a97a737fb38a",
                          "typeString": "literal_string \"Validators balance not reduced\""
                        }
                      ],
                      "id": 923,
                      "name": "assertEq",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        3674,
                        3699,
                        3712,
                        3728,
                        3770,
                        3812,
                        3854,
                        3891,
                        3928,
                        3965,
                        1329,
                        1354,
                        1384,
                        1409,
                        1468,
                        1493,
                        1523,
                        1548,
                        2648,
                        2683
                      ],
                      "referencedDeclaration": 1548,
                      "src": "3258:8:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (uint256,uint256,string memory)"
                      }
                    },
                    "id": 927,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3258:61:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 928,
                  "nodeType": "ExpressionStatement",
                  "src": "3258:61:3"
                }
              ]
            },
            "functionSelector": "1db59920",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "test_validator_add_ERC20_tokens_to_alice_NFT",
            "nameLocation": "2686:44:3",
            "parameters": {
              "id": 857,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2730:2:3"
            },
            "returnParameters": {
              "id": 858,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2739:0:3"
            },
            "scope": 1008,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 960,
            "nodeType": "FunctionDefinition",
            "src": "3332:264:3",
            "body": {
              "id": 959,
              "nodeType": "Block",
              "src": "3374:222:3",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 933,
                      "name": "test_validator_add_ERC20_tokens_to_alice_NFT",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 930,
                      "src": "3384:44:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 934,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3384:46:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 935,
                  "nodeType": "ExpressionStatement",
                  "src": "3384:46:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 939,
                        "name": "alice",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 583,
                        "src": "3449:5:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "expression": {
                        "id": 936,
                        "name": "vm",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2826,
                        "src": "3440:2:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Vm_$6177",
                          "typeString": "contract Vm"
                        }
                      },
                      "id": 938,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "prank",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 5917,
                      "src": "3440:8:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address) external"
                      }
                    },
                    "id": 940,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3440:15:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 941,
                  "nodeType": "ExpressionStatement",
                  "src": "3440:15:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 945,
                        "name": "alice",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 583,
                        "src": "3496:5:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "id": 946,
                        "name": "bob",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 592,
                        "src": "3503:3:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "hexValue": "30",
                        "id": 947,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3508:1:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        }
                      ],
                      "expression": {
                        "id": 942,
                        "name": "piNftContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 571,
                        "src": "3465:13:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_piNFT_$530",
                          "typeString": "contract piNFT"
                        }
                      },
                      "id": 944,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "safeTransferFrom",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 23351,
                      "src": "3465:30:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256) external"
                      }
                    },
                    "id": 948,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3465:45:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 949,
                  "nodeType": "ExpressionStatement",
                  "src": "3465:45:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 953,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3551:1:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "expression": {
                            "id": 951,
                            "name": "piNftContract",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 571,
                            "src": "3529:13:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_piNFT_$530",
                              "typeString": "contract piNFT"
                            }
                          },
                          "id": 952,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "ownerOf",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 23141,
                          "src": "3529:21:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_address_$",
                            "typeString": "function (uint256) view external returns (address)"
                          }
                        },
                        "id": 954,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3529:24:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 955,
                        "name": "bob",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 592,
                        "src": "3555:3:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "hexValue": "4e6f74207472616e73666572726564204e465420746f20426f62",
                        "id": 956,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3560:28:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_b893c4cfb5858086e6a516db18fdc048ebc51e14ca7b214e311cfef3bf908f2b",
                          "typeString": "literal_string \"Not transferred NFT to Bob\""
                        },
                        "value": "Not transferred NFT to Bob"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_b893c4cfb5858086e6a516db18fdc048ebc51e14ca7b214e311cfef3bf908f2b",
                          "typeString": "literal_string \"Not transferred NFT to Bob\""
                        }
                      ],
                      "id": 950,
                      "name": "assertEq",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        3674,
                        3699,
                        3712,
                        3728,
                        3770,
                        3812,
                        3854,
                        3891,
                        3928,
                        3965,
                        1329,
                        1354,
                        1384,
                        1409,
                        1468,
                        1493,
                        1523,
                        1548,
                        2648,
                        2683
                      ],
                      "referencedDeclaration": 1354,
                      "src": "3520:8:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (address,address,string memory)"
                      }
                    },
                    "id": 957,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3520:69:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 958,
                  "nodeType": "ExpressionStatement",
                  "src": "3520:69:3"
                }
              ]
            },
            "functionSelector": "2aae3c34",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "test_transfer_NFT_to_bob",
            "nameLocation": "3341:24:3",
            "parameters": {
              "id": 931,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3365:2:3"
            },
            "returnParameters": {
              "id": 932,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3374:0:3"
            },
            "scope": 1008,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 1007,
            "nodeType": "FunctionDefinition",
            "src": "3602:542:3",
            "body": {
              "id": 1006,
              "nodeType": "Block",
              "src": "3662:482:3",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 963,
                      "name": "test_transfer_NFT_to_bob",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 960,
                      "src": "3672:24:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 964,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3672:26:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 965,
                  "nodeType": "ExpressionStatement",
                  "src": "3672:26:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 969,
                        "name": "bob",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 592,
                        "src": "3717:3:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "expression": {
                        "id": 966,
                        "name": "vm",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2826,
                        "src": "3708:2:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Vm_$6177",
                          "typeString": "contract Vm"
                        }
                      },
                      "id": 968,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "prank",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 5917,
                      "src": "3708:8:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address) external"
                      }
                    },
                    "id": 970,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3708:13:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 971,
                  "nodeType": "ExpressionStatement",
                  "src": "3708:13:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "30",
                        "id": 975,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3759:1:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      {
                        "id": 976,
                        "name": "validator",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 610,
                        "src": "3762:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 979,
                            "name": "erc20Contract",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 574,
                            "src": "3781:13:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_SampleERC20_$559",
                              "typeString": "contract SampleERC20"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_SampleERC20_$559",
                              "typeString": "contract SampleERC20"
                            }
                          ],
                          "id": 978,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "3773:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 977,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "3773:7:3",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 980,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3773:22:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "hexValue": "353030",
                        "id": 981,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3797:3:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_500_by_1",
                          "typeString": "int_const 500"
                        },
                        "value": "500"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_rational_500_by_1",
                          "typeString": "int_const 500"
                        }
                      ],
                      "expression": {
                        "id": 972,
                        "name": "piNftContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 571,
                        "src": "3731:13:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_piNFT_$530",
                          "typeString": "contract piNFT"
                        }
                      },
                      "id": 974,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "transferERC20",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 404,
                      "src": "3731:27:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (uint256,address,address,uint256) external"
                      }
                    },
                    "id": 982,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3731:70:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 983,
                  "nodeType": "ExpressionStatement",
                  "src": "3731:70:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 987,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3865:1:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "id": 990,
                                "name": "erc20Contract",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 574,
                                "src": "3876:13:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_SampleERC20_$559",
                                  "typeString": "contract SampleERC20"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_SampleERC20_$559",
                                  "typeString": "contract SampleERC20"
                                }
                              ],
                              "id": 989,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "3868:7:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 988,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "3868:7:3",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 991,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3868:22:3",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "expression": {
                            "id": 985,
                            "name": "piNftContract",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 571,
                            "src": "3839:13:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_piNFT_$530",
                              "typeString": "contract piNFT"
                            }
                          },
                          "id": 986,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "viewBalance",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 529,
                          "src": "3839:25:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_view$_t_uint256_$_t_address_$returns$_t_uint256_$",
                            "typeString": "function (uint256,address) view external returns (uint256)"
                          }
                        },
                        "id": 992,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3839:52:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "hexValue": "30",
                        "id": 993,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3909:1:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      {
                        "hexValue": "4661696c656420746f2072656d6f766520455243323020746f6b656e732066726f6d204e4654",
                        "id": 994,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3928:40:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_1f033bfa997ef77e26fc1ff496adcb08db7ff1f90f81a126238c9908aec380a2",
                          "typeString": "literal_string \"Failed to remove ERC20 tokens from NFT\""
                        },
                        "value": "Failed to remove ERC20 tokens from NFT"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_1f033bfa997ef77e26fc1ff496adcb08db7ff1f90f81a126238c9908aec380a2",
                          "typeString": "literal_string \"Failed to remove ERC20 tokens from NFT\""
                        }
                      ],
                      "id": 984,
                      "name": "assertEq",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        3674,
                        3699,
                        3712,
                        3728,
                        3770,
                        3812,
                        3854,
                        3891,
                        3928,
                        3965,
                        1329,
                        1354,
                        1384,
                        1409,
                        1468,
                        1493,
                        1523,
                        1548,
                        2648,
                        2683
                      ],
                      "referencedDeclaration": 1548,
                      "src": "3812:8:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (uint256,uint256,string memory)"
                      }
                    },
                    "id": 995,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3812:170:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 996,
                  "nodeType": "ExpressionStatement",
                  "src": "3812:170:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 1000,
                            "name": "validator",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 610,
                            "src": "4039:9:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          ],
                          "expression": {
                            "id": 998,
                            "name": "erc20Contract",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 574,
                            "src": "4015:13:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_SampleERC20_$559",
                              "typeString": "contract SampleERC20"
                            }
                          },
                          "id": 999,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "balanceOf",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 22404,
                          "src": "4015:23:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                            "typeString": "function (address) view external returns (uint256)"
                          }
                        },
                        "id": 1001,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4015:34:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "hexValue": "31303030",
                        "id": 1002,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4063:4:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1000_by_1",
                          "typeString": "int_const 1000"
                        },
                        "value": "1000"
                      },
                      {
                        "hexValue": "4661696c656420746f207472616e7366657220455243323020746f6b656e7320746f2076616c696461746f72",
                        "id": 1003,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4081:46:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_721313ceb6bc867eb41269637f88adcbe28c5cae09548251769041f0873c4fc1",
                          "typeString": "literal_string \"Failed to transfer ERC20 tokens to validator\""
                        },
                        "value": "Failed to transfer ERC20 tokens to validator"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_rational_1000_by_1",
                          "typeString": "int_const 1000"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_721313ceb6bc867eb41269637f88adcbe28c5cae09548251769041f0873c4fc1",
                          "typeString": "literal_string \"Failed to transfer ERC20 tokens to validator\""
                        }
                      ],
                      "id": 997,
                      "name": "assertEq",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        3674,
                        3699,
                        3712,
                        3728,
                        3770,
                        3812,
                        3854,
                        3891,
                        3928,
                        3965,
                        1329,
                        1354,
                        1384,
                        1409,
                        1468,
                        1493,
                        1523,
                        1548,
                        2648,
                        2683
                      ],
                      "referencedDeclaration": 1548,
                      "src": "3993:8:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (uint256,uint256,string memory)"
                      }
                    },
                    "id": 1004,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3993:144:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1005,
                  "nodeType": "ExpressionStatement",
                  "src": "3993:144:3"
                }
              ]
            },
            "functionSelector": "050a80fa",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "test_bob_disintegrate_NFT_and_ERC20_tokens",
            "nameLocation": "3611:42:3",
            "parameters": {
              "id": 961,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3653:2:3"
            },
            "returnParameters": {
              "id": 962,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3662:0:3"
            },
            "scope": 1008,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 567,
              "name": "Test",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 4350,
              "src": "265:4:3"
            },
            "id": 568,
            "nodeType": "InheritanceSpecifier",
            "src": "265:4:3"
          }
        ],
        "canonicalName": "ContractTest",
        "contractDependencies": [
          530,
          559
        ],
        "contractKind": "contract",
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          1008,
          4350,
          3031,
          2795
        ],
        "name": "ContractTest",
        "nameLocation": "249:12:3",
        "scope": 1009,
        "usedErrors": []
      }
    ],
    "license": "UNLICENSED"
  },
  "id": 3
}